{"version":3,"file":"course_overview_updating.min.js","sources":["../src/course_overview_updating.js"],"sourcesContent":["import ajax from 'core/ajax';\nimport Templates from 'core/templates';\nimport ModalFactory from 'core/modal_factory';\nimport {get_string as getString} from 'core/str';\nimport {add as addToast} from 'core/toast';\n\nexport const init = () => {\n    update_student_status_for_advisor();\n    update_student_status_for_instructor();\n    preview_message();\n};\n\nfunction update_student_status_for_instructor() {\n\n    // Select all checkboxes with the class .checkbox-instructor-followup\n    const checkboxes = document.querySelectorAll('.checkbox-instructor-followup');\n\n    // Loop through each checkbox and add an event listener\n    checkboxes.forEach(function (checkbox) {\n        checkbox.addEventListener('change', function () {\n            const logId = this.getAttribute('data-logid');\n            const status = this.checked ? 1 : 0;\n\n            ajax.call([{\n                methodname: 'earlyalert_update_student_status_instructor',\n                args: {\n                    logid: logId,\n                    status: status\n                }\n            }])[0].then(function (response) {\n                console.log(response);\n                // Show Toast notification\n                addToast(getString('advised_success_toast', 'local_earlyalert'), {\n                    delay: 10000,\n                    closeButton: true,\n                });\n            }).catch(function (error) {\n                console.error('Failed to update student status:', error);\n                addToast(getString('advised_failed_toast', 'local_earlyalert'), {\n                    delay: 10000,\n                    closeButton: true,\n                });\n            });\n        });\n    });\n}\n\nfunction update_student_status_for_advisor() {\n    // Select all checkboxes with the class .checkbox-advisor-followup\n    const checkboxes = document.querySelectorAll('.checkbox-advisor-followup');\n\n    // Loop through each checkbox and add an event listener\n    checkboxes.forEach(function (checkbox) {\n        checkbox.addEventListener('change', function () {\n            const logId = this.getAttribute('data-logid');\n            const status = this.checked ? 1 : 0;\n\n            ajax.call([{\n                methodname: 'earlyalert_update_student_status_advisor',\n                args: {\n                    logid: logId,\n                    status: status\n                }\n            }])[0].then(function (response) {\n                console.log(response);\n                // Show Toast notification\n                addToast(getString('advised_success_toast', 'local_earlyalert'), {\n                    delay: 10000,\n                    closeButton: true,\n                });\n            }).catch(function (error) {\n                console.error('Failed to update student status:', error);\n                addToast(getString('advised_failed_toast', 'local_earlyalert'), {\n                    delay: 10000,\n                    closeButton: true,\n                });\n            });\n        });\n    });\n}\n\nfunction preview_message() {\n    const previewButtons = document.querySelectorAll('.btn-early-alert-preview-message');\n\n    previewButtons.forEach(function (previewButton) {\n        previewButton.addEventListener('click', function () {\n            const logId = this.getAttribute('data-logid');\n            ajax.call([{\n                methodname: 'earlyalert_get_message',\n                args: {\n                    logid: logId\n                }\n            }])[0].then(function (response) {\n                ModalFactory.create({\n                    title: getString('preview_email', 'local_earlyalert'),\n                    type: ModalFactory.types.CANCEL,\n                    body: Templates.render('local_earlyalert/preview_student_email', response),\n                    large: true,\n                }).then(modal => {\n                    modal.show();\n                });\n            }).catch(function (error) {\n                console.error('Failed to preview message:', error);\n            });\n        });\n    });\n}\n\n"],"names":["document","querySelectorAll","forEach","checkbox","addEventListener","logId","this","getAttribute","status","checked","call","methodname","args","logid","then","response","console","log","delay","closeButton","catch","error","previewButton","create","title","type","ModalFactory","types","CANCEL","body","Templates","render","large","modal","show"],"mappings":"8fAMoB,KA2CGA,SAASC,iBAAiB,8BAGlCC,SAAQ,SAAUC,UACzBA,SAASC,iBAAiB,UAAU,iBAC1BC,MAAQC,KAAKC,aAAa,cAC1BC,OAASF,KAAKG,QAAU,EAAI,gBAE7BC,KAAK,CAAC,CACPC,WAAY,2CACZC,KAAM,CACFC,MAAOR,MACPG,OAAQA,WAEZ,GAAGM,MAAK,SAAUC,UAClBC,QAAQC,IAAIF,0BAEH,mBAAU,wBAAyB,oBAAqB,CAC7DG,MAAO,IACPC,aAAa,OAElBC,OAAM,SAAUC,OACfL,QAAQK,MAAM,mCAAoCA,uBACzC,mBAAU,uBAAwB,oBAAqB,CAC5DH,MAAO,IACPC,aAAa,aA3DVnB,SAASC,iBAAiB,iCAGlCC,SAAQ,SAAUC,UACzBA,SAASC,iBAAiB,UAAU,iBAC1BC,MAAQC,KAAKC,aAAa,cAC1BC,OAASF,KAAKG,QAAU,EAAI,gBAE7BC,KAAK,CAAC,CACPC,WAAY,8CACZC,KAAM,CACFC,MAAOR,MACPG,OAAQA,WAEZ,GAAGM,MAAK,SAAUC,UAClBC,QAAQC,IAAIF,0BAEH,mBAAU,wBAAyB,oBAAqB,CAC7DG,MAAO,IACPC,aAAa,OAElBC,OAAM,SAAUC,OACfL,QAAQK,MAAM,mCAAoCA,uBACzC,mBAAU,uBAAwB,oBAAqB,CAC5DH,MAAO,IACPC,aAAa,aA0CNnB,SAASC,iBAAiB,oCAElCC,SAAQ,SAAUoB,eAC7BA,cAAclB,iBAAiB,SAAS,iBAC9BC,MAAQC,KAAKC,aAAa,4BAC3BG,KAAK,CAAC,CACPC,WAAY,yBACZC,KAAM,CACFC,MAAOR,UAEX,GAAGS,MAAK,SAAUC,iCACLQ,OAAO,CAChBC,OAAO,mBAAU,gBAAiB,oBAClCC,KAAMC,uBAAaC,MAAMC,OACzBC,KAAMC,mBAAUC,OAAO,yCAA0ChB,UACjEiB,OAAO,IACRlB,MAAKmB,QACJA,MAAMC,aAEXd,OAAM,SAAUC,OACfL,QAAQK,MAAM,6BAA8BA"}