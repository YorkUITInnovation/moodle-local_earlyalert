{"version":3,"file":"filter_students_grade.min.js","sources":["../src/filter_students_grade.js"],"sourcesContent":["import ajax from 'core/ajax';\nimport Templates from 'core/templates';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport {get_string as getString} from 'core/str';\nimport notification from 'core/notification';\nimport {get_format as formatString} from 'core/str';\nimport selectBox from 'local_earlyalert/select_box';\nimport config from 'core/config';\n\nexport const init = () => {\n    alert_type_button();\n    get_users();\n};\n\nfunction alert_type_button() {\n    // Get data-link when .early-alert-type-button link is clicked\n    document.addEventListener('click', function (event) {\n        if (event.target.classList.contains('early-alert-type-button')) {\n            let alert_type = event.target.getAttribute('data-link');\n            let course_name = event.target.getAttribute('data-name');\n            let course_id = event.target.getAttribute('data-course_id');\n            let teacher_user_id = document.getElementById('early-alert-teacher-user-id').value;\n            // console.log('teacher_user_id:', teacher_user_id);\n            // Get student list based on alert type\n            setup_filter_students_by_grade(course_id, 9, course_name, alert_type,teacher_user_id);\n        }\n    });\n}\n\n\n/**\n * Adds students with grades\n */\n// function filter_students_by_default_grade() {\n//\n//     // Get course id from the hidden input field wiht id early_alert_filter_course_id\n//     const course_id = document.getElementById('early_alert_filter_course_id').value;\n//     // initial default setup of student list\n//     setup_filter_students_by_grade(course_id, 9); // extract this 9 from php which might be configurable in the future\n//\n// }\n\nfunction filter_students_by_grade_select() {\n\n    // Get the s delected grade value from the dropdown\n    const grade_select = document.getElementById('id_early_alert_filter_grade_select') || {};\n    const course_id = document.getElementById('early_alert_filter_course_id').value;\n    const course_name = document.getElementById('early_alert_course_name').value;\n    const alert_type = document.getElementById('early-alert-alert-type').value;\n    const teacher_user_id = document.getElementById('early-alert-teacher-user-id').value;\n    // setup listener for drop down selection\n    grade_select.addEventListener('change', function (e) {\n        let grade_letter_id = e.target.value;\n        setup_filter_students_by_grade(course_id, grade_letter_id, course_name, alert_type, teacher_user_id);\n\n    });\n}\n\nfunction filter_students_by_assignment() {\n\n    console.log('filter students assignment');\n    // Get the s delected grade value from the dropdown\n    const grade_select = document.getElementById('id_early_alert_filter_grade_select') || {};\n    const course_id = document.getElementById('early_alert_filter_course_id').value;\n    const course_name = document.getElementById('early_alert_course_name').value;\n    const alert_type = document.getElementById('early-alert-alert-type').value;\n    const teacher_user_id = document.getElementById('early-alert-teacher-user-id').value;\n    // setup listener for drop down selection\n    const assignment_input = document.getElementById('early-alert-assignment-title');\n    assignment_input.addEventListener('focusout', function(evt) {\n        console.log('setting up listener for assign');\n        var assignment_title = document.getElementById('early-alert-assignment-title').value;\n        if (assignment_title) {\n            console.log('we got a title');\n            setup_filter_students_by_grade(course_id, '9', course_name, alert_type, teacher_user_id, assignment_title);\n        }\n    });\n}\n/**\n * Fetches the student list based on the course_id and grade_letter_id\n * @param course_id\n * @param grade_letter_id\n * @param course_name\n * @param alert_type\n */\nfunction setup_filter_students_by_grade(course_id, grade_letter_id, course_name, alert_type, teacher_user_id, assignment_title=\"\") {\n    let selected_students = [];\n    // convert course_id into an integer\n    course_id = parseInt(course_id);\n    grade_letter_id = parseInt(grade_letter_id);\n    // Add course_id to element with id early_alert_filter_course_id\n    document.getElementById('early_alert_filter_course_id').value = course_id;\n    // Add alert type to element with id early-alert-alert-type\n    document.getElementById('early-alert-alert-type').value = alert_type;\n    // Add course name to element with id early_alert_course_name\n    document.getElementById('early_alert_course_name').value = course_name;\n\n    // Only display if course_id is greater than 0\n    if (course_id > 0) {\n        //Show loader\n        Templates.render('local_earlyalert/loader', {})\n            .then(function (html, js) {\n                // Insert the rendered template into the target element\n                document.getElementById('early-alert-student-results').innerHTML = html;\n                Templates.runTemplateJS(js);\n            })\n            .catch(function (error) {\n                console.error('Failed to render template:', error);\n            });\n\n\n\n        // Fetch student list and templates\n        var get_grades_and_templates = ajax.call([\n            { methodname: 'earlyalert_course_grades_percent_get', args: { id: course_id, grade_letter_id: grade_letter_id, \"teacher_user_id\": teacher_user_id } },\n            { methodname: 'earlyalert_course_student_templates', args: { \"teacher_user_id\": teacher_user_id, \"id\": course_id, \"alert_type\": alert_type } }\n        ]);\n\n        const finalCache = new Map();\n\n        Promise.all(get_grades_and_templates).then(([grades_response, templates_response]) => {\n\n            // Reformat the data to display in a grid\n            let num_students = grades_response.length;\n            // console.log('Number of students returned: ' + num_students);\n            let num_rows = Math.min(3, Math.ceil(num_students / 3));\n            let num_cols = Math.ceil(num_students / num_rows);\n            let display_data = {\n                num_rows: num_rows,\n                num_cols: num_cols,\n                student_rows: []\n            };\n\n            let templates = [];\n\n            // Initialize rows array\n            for (let r = 0; r < num_rows; r++) {\n                display_data.student_rows[r] = {students: []};\n            }\n\n            let row = 0;\n            let col = 0;\n\n            grades_response.forEach(result => {\n                if (typeof result === 'object') {\n                    if (!templates.includes(result.campus + \"_\" + result.faculty + \"_\" + result.major)) {\n                        templates.push(result.campus + \"_\" + result.faculty + \"_\" + result.major);\n                    }\n                    if (!templates.includes(result.campus + \"_\" + result.faculty)) {\n                        templates.push(result.campus + \"_\" + result.faculty);\n                    }\n                    result.faculty = result.faculty ? result.faculty : '';\n                    result.major = result.major ? result.major : '';\n                    result.campus = result.campus ? result.campus : '';\n                    display_data.student_rows[row].students[col] = result;\n                    col++;\n                    if (col === num_cols) {\n                        col = 0;\n                        row++;\n                    }\n                }\n            });\n\n            display_data.templates = JSON.stringify(templates);\n\n            if (alert_type === 'grade') {\n                // Add alert_type to display_data\n                display_data.alert_type = 'Low Grade';\n                display_data.grade = true;\n            }\n\n            if (alert_type === 'assign') {\n                // Add alert_type to display_data\n                display_data.alert_type = 'Missed Assignment';\n                display_data.assign = true;\n            }\n\n            if (alert_type === 'exam') {\n                // Add alert_type to display_data\n                display_data.alert_type = 'Missed Exam';\n                display_data.exam = true;\n            }\n            display_data.fullname = course_name;\n            // console.log( display_data);\n            // Render the template with display_data\n            Templates.render('local_earlyalert/course_student_list', display_data)\n                .then(function (html, js) {\n                    // Insert the rendered template into the target element\n                    document.getElementById('early-alert-student-results').innerHTML = html;\n                    Templates.runTemplateJS(js);\n                    // set default grade letter selected\n                    if (alert_type === 'grade') {\n                        let grade_select = document.getElementById('id_early_alert_filter_grade_select') || {};\n                        grade_select.value = grade_letter_id;\n                        // setup listener for filtering students by grade drop down\n                        filter_students_by_grade_select();\n                    }\n                    if (alert_type === 'assign') {\n                        document.getElementById('early-alert-assignment-title').value = assignment_title;\n                        filter_students_by_assignment();\n                    }\n\n                    // we're not doing any more\n                    // check_all_student_grades(selected_students);\n                    check_allnone_listener(selected_students);\n\n                    const cachedArrayElement = document.getElementById('early-alert-template-cache');\n                    const cachedArray = JSON.parse(cachedArrayElement.value);\n                    templates_response.forEach(result => {\n                        if (typeof result === 'object') {\n                            if (cachedArray.includes(result.templateKey)){\n                                let finalMessage = {\n                                    subject: result.subject,\n                                    message: result.message,\n                                    templateid: result.templateid,\n                                    revision_id: result.revision_id,\n                                    course_id: result.course_id,\n                                    instructor_id: result.instructor_id,\n                                    triggered_from_user_id: result.triggered_from_user_id,\n                                };\n                                finalCache.set(result.templateKey, finalMessage);\n                            }\n                        }\n                    });\n                    finalCache.set('course_name', course_name);\n                    // case where assignment titles are taken from user input\n                    if (alert_type === 'assign') // we have to setup the assignment title before previewing!\n                    {\n                        finalCache.set('assignment_title',assignment_title );\n                        console.log('setting up previews with titles ');\n                        if (assignment_title){ // there is a case where previews were setup without titles then dont create modals\n                            setup_preview_emails_with_titles(finalCache); // call back function\n                        }\n\n                    }\n                    else { // for other alert types\n                        setup_preview_emails(finalCache);\n                    }\n                })\n                .catch(function (error) {\n                    console.error('Failed to render template:', error);\n                });\n        });\n\n    }\n}\n\n\nfunction check_all_student_grades(selected_students) {\n    const student_ids_selected = document.getElementById(\"early-alert-student-ids\") || {};\n    student_ids_selected.value = [];\n    const check_all_none_checkbox = document.getElementById('early-alert-checkall-student-checkbox');\n    check_all_none_checkbox.checked = true;\n    //check box for grade showing - remove later\n    const student_checkboxes = document.querySelectorAll(\"input[class^='early-alert-student-checkbox']\");\n    // check box for grade showing - remove later\n    student_checkboxes.forEach(function (checkbox) {\n        checkbox.checked = true;\n        selected_students.push(checkbox.getAttribute('data-student-id'));\n    });\n    student_ids_selected.value = JSON.stringify(selected_students);\n}\n\n// function to save to hidden field on submit if anyone unchecks student records\nfunction check_individual_students_checkboxes_for_submit(){\n    let selected_students = [];\n    const student_ids_selected = document.getElementById(\"early-alert-student-ids\") || {};\n    const student_checkboxes = document.querySelectorAll(\"input[class^='early-alert-student-checkbox']\");\n    student_checkboxes.forEach(function (checkbox) {\n        if (checkbox.checked){\n            selected_students.push(checkbox.getAttribute('data-student-id'));\n        }\n    });\n    student_ids_selected.value = JSON.stringify(selected_students);\n}\n\nfunction check_allnone_listener(selected_students) {\n    // Add an event listener to the select all checkbox\n    const check_all_none_checkbox = document.getElementById('early-alert-checkall-student-checkbox');\n    const student_ids_selected = document.getElementById(\"early-alert-student-ids\") || {};\n\n    check_all_none_checkbox.addEventListener('click', function () {\n        student_ids_selected.value = [];\n        // Get all checkboxes within the list\n        let checkboxes = document.querySelectorAll(\"input[class^='early-alert-student-checkbox']\");\n        // Loop through each checkbox and toggle its selection based on the state of the select all checkbox\n        checkboxes.forEach(function (checkbox) {\n            if (check_all_none_checkbox.checked) {\n                checkbox.checked = true;\n                selected_students.push(checkbox.getAttribute('data-student-id'));\n            } else {\n                checkbox.checked = false;\n                selected_students = selected_students.filter(item => item !== checkbox.getAttribute('data-student-id'));\n            }\n        });\n        student_ids_selected.value = JSON.stringify(selected_students);\n    });\n}\n\nfunction setup_preview_emails(templateCache) {\n    // console.log(\"template cache = \", templateCache);\n    const preview_buttons = document.querySelectorAll(\".early-alert-preview-button\");\n    // Get the early-alert-alert-type value\n    const alert_type = document.getElementById('early-alert-alert-type').value;\n    // Loop through each checkbox and toggle its selection based on the state of the select all checkbox\n    //console.log(\"template cache:\", templateCache);\n    // store ALL the student data and template cache etc when its processed\n    let student_template_cache_array = [];\n    preview_buttons.forEach(function (button) {\n        let record_data = {};\n        const checkbox = button.closest('tr').querySelector('.early-alert-student-checkbox');\n        const assigngrade = button.closest('tr').querySelector('.early-alert-grade-column').querySelector('.badge').innerHTML;\n        let selected_grade = '';\n        let selected_grade_value = 0;\n        if (alert_type === 'grade') { // we only use grade/select etc in this alert type\n            const grade_select = document.getElementById('id_early_alert_filter_grade_select') || {};\n            selected_grade = grade_select.options[grade_select.selectedIndex].text;\n            selected_grade_value = grade_select.value;\n        }\n\n        let templateObj = {};\n        if (checkbox) {\n\n            // now, access the parent <tr> element (the table row)\n            const table_row = checkbox.parentNode;\n            // extract the student name from the second <td> element within the table row\n            const student_name_td = table_row.nextElementSibling;\n            // fix and parse the name\n            const student_lname_fname = student_name_td.firstChild;\n            var student_name_arr = [];\n            var student_name = \"\";\n            student_lname_fname.data.split(/\\s*,\\s*/).forEach(function(me) {\n                student_name_arr.push(me);\n            });\n            student_name = student_name_arr[1] + ' ' + student_name_arr[0];\n            // console.log(student_name);\n            var student_id = checkbox.getAttribute('data-student-id');\n            const studentCampusAttr = checkbox.getAttribute('data-student-campus');\n            const studentFacultyAttr = checkbox.getAttribute('data-student-faculty');\n            const studentMajorAttr = checkbox.getAttribute('data-student-major');\n            var facTemplateKey = studentCampusAttr  + '_'  + studentFacultyAttr;\n            var deptTemplateKey = studentCampusAttr  + '_'  + studentFacultyAttr  + '_'  + studentMajorAttr;\n            var templateEmailContent = '';\n            var templateEmailSubject = '';\n\n            if (templateCache.has(deptTemplateKey)){\n                // console.log(\"department cache found:\", templateCache.get(deptTemplateKey));\n                templateEmailSubject = templateCache.get(deptTemplateKey).subject;\n                templateEmailContent = templateCache.get(deptTemplateKey).message;\n                templateObj = templateCache.get(deptTemplateKey);\n            } else if (templateCache.has(facTemplateKey)) {\n                // console.log(\"faculty cache found:\", templateCache.get(facTemplateKey));\n                templateEmailSubject = templateCache.get(facTemplateKey).subject;\n                templateEmailContent = templateCache.get(facTemplateKey).message;\n                templateObj = templateCache.get(facTemplateKey);\n            } else {\n                templateEmailSubject = 'Template not found';\n                templateEmailContent = 'Template not found';\n            }\n\n        } else {\n            // console.log(\"couldn't find checkbox :/\");\n        }\n\n        if (assigngrade){\n            // console.log(\"assign grade: \", assigngrade);\n        }\n        // console.log(\"template email content:\", templateEmailContent);\n\n        var assignment_title = '';\n\n        var params = {\n            studentname: student_name_arr,\n            assignmentgrade: assigngrade,\n            assignmenttitle: templateCache.get('assignment_title'),\n            coursename: templateCache.get('course_name'),\n            customgrade: selected_grade ? selected_grade : 'D+',\n            defaultgrade: \"D+\"\n        };\n\n        //console.log(\"passing these params to adduserinfo:\", params);\n        templateEmailContent = addUserInfo(templateEmailContent, params );\n\n        // console.log(\"template email content post-addUserInfo:\", templateEmailContent);\n\n        // assemble record data for individual buttons which includes student and template data\n        record_data.student_id = student_id;\n        record_data.student_name = student_name;\n        record_data.course_name = templateCache.get('course_name');\n        record_data.templateEmailSubject = templateEmailSubject;\n        record_data.templateEmailContent = templateEmailContent;\n        record_data.template_id = templateObj.templateid;\n        record_data.revision_id = templateObj.revision_id;\n        record_data.triggered_from_user_id = templateObj.triggered_from_user_id;\n        record_data.target_user_id = student_id;\n        record_data.course_id = templateObj.course_id;\n        record_data.instructor_id = templateObj.instructor_id;\n        record_data.assignment_name = params.assignmenttitle;\n        record_data.actual_grade = assigngrade;\n        record_data.trigger_grade = selected_grade_value;\n\n        // case where previews are just added to grade alert type and missed exam etc\n        if (alert_type !== 'assign') {\n            button.addEventListener('click', function () {\n                setup_preview_buttons_from_template(record_data);\n            });\n        }\n        // add record to student_template_cache_array to have data to submit / email\n        // console.log(\"record data =\", record_data);\n        student_template_cache_array.push(record_data);\n\n    });\n\n    // once we have all the data we can setup the emails to submit with the template cache data and student ids BUT we have to manage and select the users if they are checked/unchceked\n    setup_send_emails(student_template_cache_array);\n}\n\nfunction setup_preview_emails_with_titles(templateCache) {\n    // console.log(\"template cache = \", templateCache);\n    const preview_buttons = document.querySelectorAll(\".early-alert-preview-button\");\n    // Get the early-alert-alert-type value\n    const alert_type = document.getElementById('early-alert-alert-type').value;\n    // Loop through each checkbox and toggle its selection based on the state of the select all checkbox\n    //console.log(\"template cache:\", templateCache);\n    // store ALL the student data and template cache etc when its processed\n    let student_template_cache_array = [];\n    preview_buttons.forEach(function (button) {\n        button.removeEventListener('click', null);\n        let record_data = {};\n        const checkbox = button.closest('tr').querySelector('.early-alert-student-checkbox');\n        const assigngrade = button.closest('tr').querySelector('.early-alert-grade-column').querySelector('.badge').innerHTML;\n        let selected_grade = '';\n        let selected_grade_value = 0;\n        if (alert_type === 'grade') { // we only use grade/select etc in this alert type\n            const grade_select = document.getElementById('id_early_alert_filter_grade_select') || {};\n            selected_grade = grade_select.options[grade_select.selectedIndex].text;\n            selected_grade_value = grade_select.value;\n        }\n\n        let templateObj = {};\n        if (checkbox) {\n\n            // now, access the parent <tr> element (the table row)\n            const table_row = checkbox.parentNode;\n            // extract the student name from the second <td> element within the table row\n            const student_name_td = table_row.nextElementSibling;\n            // fix and parse the name\n            const student_lname_fname = student_name_td.firstChild;\n            var student_name_arr = [];\n            var student_name = \"\";\n            student_lname_fname.data.split(/\\s*,\\s*/).forEach(function(me) {\n                student_name_arr.push(me);\n            });\n            student_name = student_name_arr[1] + ' ' + student_name_arr[0];\n            // console.log(student_name);\n            var student_id = checkbox.getAttribute('data-student-id');\n            const studentCampusAttr = checkbox.getAttribute('data-student-campus');\n            const studentFacultyAttr = checkbox.getAttribute('data-student-faculty');\n            const studentMajorAttr = checkbox.getAttribute('data-student-major');\n            var facTemplateKey = studentCampusAttr  + '_'  + studentFacultyAttr;\n            var deptTemplateKey = studentCampusAttr  + '_'  + studentFacultyAttr  + '_'  + studentMajorAttr;\n            var templateEmailContent = '';\n            var templateEmailSubject = '';\n\n            if (templateCache.has(deptTemplateKey)){\n                // console.log(\"department cache found:\", templateCache.get(deptTemplateKey));\n                templateEmailSubject = templateCache.get(deptTemplateKey).subject;\n                templateEmailContent = templateCache.get(deptTemplateKey).message;\n                templateObj = templateCache.get(deptTemplateKey);\n            } else if (templateCache.has(facTemplateKey)) {\n                // console.log(\"faculty cache found:\", templateCache.get(facTemplateKey));\n                templateEmailSubject = templateCache.get(facTemplateKey).subject;\n                templateEmailContent = templateCache.get(facTemplateKey).message;\n                templateObj = templateCache.get(facTemplateKey);\n            } else {\n                templateEmailSubject = 'Template not found';\n                templateEmailContent = 'Template not found';\n            }\n\n        } else {\n            // console.log(\"couldn't find checkbox :/\");\n        }\n\n        if (assigngrade){\n            // console.log(\"assign grade: \", assigngrade);\n        }\n        // console.log(\"template email content:\", templateEmailContent);\n\n        var assignment_title = '';\n\n        var params = {\n            studentname: student_name_arr,\n            assignmentgrade: assigngrade,\n            assignmenttitle: templateCache.get('assignment_title'),\n            coursename: templateCache.get('course_name'),\n            customgrade: selected_grade ? selected_grade : 'D+',\n            defaultgrade: \"D+\"\n        };\n        //console.log(\"passing these params to adduserinfo:\", params);\n        templateEmailContent = addUserInfo(templateEmailContent, params );\n\n        // console.log(\"template email content post-addUserInfo:\", templateEmailContent);\n\n        // assemble record data for individual buttons which includes student and template data\n        record_data.student_id = student_id;\n        record_data.student_name = student_name;\n        record_data.course_name = templateCache.get('course_name');\n        record_data.templateEmailSubject = templateEmailSubject;\n        record_data.templateEmailContent = templateEmailContent;\n        record_data.template_id = templateObj.templateid;\n        record_data.revision_id = templateObj.revision_id;\n        record_data.triggered_from_user_id = templateObj.triggered_from_user_id;\n        record_data.target_user_id = student_id;\n        record_data.course_id = templateObj.course_id;\n        record_data.instructor_id = templateObj.instructor_id;\n        record_data.assignment_name = params.assignmenttitle;\n        record_data.actual_grade = assigngrade;\n        record_data.trigger_grade = selected_grade_value;\n\n        console.log('checking button onclick: ', button.onclick);\n        button.addEventListener('click', function () {\n            setup_preview_buttons_from_template(record_data);\n        });\n        student_template_cache_array.push(record_data);\n\n    });\n    setup_send_emails(student_template_cache_array);\n}\nvar current_modal = null;\nfunction setup_preview_buttons_from_template(student_template_data) {\n\n        ModalFactory.create({\n            title: getString('preview_email', 'local_earlyalert'),\n            type: ModalFactory.types.CANCEL,\n            body: Templates.render('local_earlyalert/preview_student_email', {\n                name: student_template_data.template_name,\n                student_name: student_template_data.student_name,\n                subject: student_template_data.templateEmailSubject,\n                message: student_template_data.templateEmailContent,\n                instructor_name: ''\n            }),\n            large: true,\n\n        }).done(modal => {\n            modal.show();\n            current_modal = modal;\n            // modal.getRoot().on(ModalEvents.cancel, function(){\n            //     current_modal.getRoot().remove();\n            // });\n\n            return current_modal;\n        });\n\n}\nfunction setup_send_emails(student_template_cache_array) {\n    const send_button = document.getElementById('early-alert-send-button1');\n    const send_button2 = document.getElementById('early-alert-send-button2');\n    send_button.addEventListener('click', function () {\n        maintain_student_template_data_for_submit(student_template_cache_array);\n    });\n    send_button2.addEventListener('click', function () {\n        maintain_student_template_data_for_submit(student_template_cache_array);\n    });\n}\n\nfunction maintain_student_template_data_for_submit(student_template_cache_array){\n    check_individual_students_checkboxes_for_submit();\n    var student_ids_array = JSON.parse(document.getElementById(\"early-alert-student-ids\").value); // hidden field ids\n    // remove students from template cache if they have been unchecked\n    var new_student_temp_array = student_template_cache_array.filter(student => student_ids_array.includes(student.student_id));\n    new_student_temp_array.length > 0 ? create_notification_dialog(new_student_temp_array) : alert('No students selected');\n}\n\nfunction create_notification_dialog(student_template_cache_array) {\n\n    // Get the data id attribute value\n    var send_string = getString('send_email', 'local_earlyalert');\n    var send_dialog_text = getString('send_dialog_text', 'local_earlyalert');\n    var send = getString('send', 'local_earlyalert');\n    var cancel = getString('cancel', 'local_earlyalert');\n    var could_not_send_email = getString('could_not_send_email', 'local_earlyalert');\n    var sent_dialog_text = getString('sent_dialog_text', 'local_earlyalert');\n\n    // Notification\n    notification.confirm(send_string, send_dialog_text, send, cancel, function () {\n\n        // send emails and save records\n        var sendEmail = ajax.call([{\n            methodname: 'earlyalert_report_log_insert',\n            args: {\n                template_data: JSON.stringify(student_template_cache_array),\n            }\n        }]);\n        sendEmail[0].done(function () {\n            // success\n            sendEmail[0].then(result => {\n                notification.alert('Email', getString('sent_dialog_text', 'local_earlyalert', result));}\n            );\n        }).fail(function () {\n            notification.alert(could_not_send_email);\n        });\n    });\n}\n\nfunction get_users() {\n   selectBox.init('#search', 'earlyalert_get_users', \"Select a user\");\n   // On search change, navigate to a url with the user_id as a parameter\n    let search = document.getElementById('search');\n    if (search) {\n        document.getElementById('search').addEventListener('change', function (event) {\n            window.location.href = config.wwwroot + '/local/earlyalert/dashboard.php?user_id=' + search.value;\n        });\n    }\n}\n\nfunction addUserInfo(emailText, params) {\n    // Define text replacements\n    const textReplace = [\n        '[firstname]',\n        '[fullname]',\n        '[usergrade]',\n        '[grade]',\n        '[coursetitle]',\n        '[assignmenttitle]'\n    ];\n\n    // Build replacement info\n    let uniqueMatches = {};\n    for (let i = 0; i < textReplace.length; i++) {\n        console.log(\"checking for:\",textReplace[i]);\n        if (emailText.includes(textReplace[i])) {\n            // Perform action for each unique match found\n            switch (i) {\n                case 0:\n                    // firstname action\n                    let firstNameText = params.studentname[1] ? params.studentname[1] : '{USER_NOT_FOUND}';\n                    uniqueMatches[i] = firstNameText;\n                    break;\n                case 1:\n                    // fullname action\n                    let targetUser = params.studentname[1] ? `${params.studentname[1]} ${params.studentname[0]}` : '{USER_NOT_FOUND}';\n                    uniqueMatches[i] = targetUser;\n                    break;\n                case 2:\n                    // usergrade action\n                    let userGradeText = params.assignmentgrade || '{USER GRADE NOT PROVIDED/FOUND}';\n                    uniqueMatches[i] = userGradeText;\n                    break;\n                case 3:\n                    // grade acton\n                    let defaultGradeText = params.customgrade || (params.defaultgrade ? params.defaultgrade : '{GRADE NOT PROVIDED/FOUND}');\n                    uniqueMatches[i] = defaultGradeText;\n                    break;\n                case 4:\n                    // coursetitle action\n                    let courseTitleText = params.coursename || '{COURSE TITLE NOT FOUND}';\n                    uniqueMatches[i] = courseTitleText;\n                    break;\n                case 5:\n                    // assignmenttitle action\n                    let assignmentTitleText = params.assignmenttitle || '{ASSIGNMENT TITLE NOT FOUND}';\n                    uniqueMatches[i] = assignmentTitleText;\n                    break;\n            }\n        }\n    }\n    // Replace the text with the matched values\n    for (let i = 0; i < textReplace.length; i++) {\n        if (uniqueMatches[i]) {\n            emailText = emailText.replace(textReplace[i], uniqueMatches[i]);\n        }\n    }\n    return emailText;\n}\n"],"names":["filter_students_by_grade_select","grade_select","document","getElementById","course_id","value","course_name","alert_type","teacher_user_id","addEventListener","e","grade_letter_id","target","setup_filter_students_by_grade","filter_students_by_assignment","console","log","evt","assignment_title","selected_students","parseInt","render","then","html","js","innerHTML","runTemplateJS","catch","error","get_grades_and_templates","ajax","call","methodname","args","id","finalCache","Map","Promise","all","_ref","grades_response","templates_response","num_students","length","num_rows","Math","min","ceil","num_cols","display_data","student_rows","templates","r","students","row","col","forEach","result","includes","campus","faculty","major","push","JSON","stringify","grade","assign","exam","fullname","check_allnone_listener","cachedArrayElement","cachedArray","parse","templateKey","finalMessage","subject","message","templateid","revision_id","instructor_id","triggered_from_user_id","set","setup_preview_emails_with_titles","setup_preview_emails","check_all_none_checkbox","student_ids_selected","querySelectorAll","checkbox","checked","getAttribute","filter","item","templateCache","preview_buttons","student_template_cache_array","button","record_data","closest","querySelector","assigngrade","selected_grade","selected_grade_value","options","selectedIndex","text","templateObj","student_lname_fname","parentNode","nextElementSibling","firstChild","student_name_arr","student_name","data","split","me","student_id","studentCampusAttr","studentFacultyAttr","facTemplateKey","deptTemplateKey","templateEmailContent","templateEmailSubject","has","get","params","studentname","assignmentgrade","assignmenttitle","coursename","customgrade","defaultgrade","addUserInfo","template_id","target_user_id","assignment_name","actual_grade","trigger_grade","setup_preview_buttons_from_template","setup_send_emails","removeEventListener","onclick","event","classList","contains","init","search","window","location","href","config","wwwroot","get_users","student_template_data","create","title","type","ModalFactory","types","CANCEL","body","Templates","name","template_name","instructor_name","large","done","modal","show","send_button","send_button2","maintain_student_template_data_for_submit","check_individual_students_checkboxes_for_submit","student_ids_array","new_student_temp_array","student","send_string","send_dialog_text","send","cancel","could_not_send_email","confirm","sendEmail","template_data","alert","fail","create_notification_dialog","emailText","textReplace","uniqueMatches","i","firstNameText","targetUser","userGradeText","defaultGradeText","courseTitleText","assignmentTitleText","replace"],"mappings":"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"}