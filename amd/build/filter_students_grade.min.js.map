{"version":3,"file":"filter_students_grade.min.js","sources":["../src/filter_students_grade.js"],"sourcesContent":["import ajax from 'core/ajax';\nimport Templates from 'core/templates';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport {get_string as getString} from 'core/str';\nimport notification from 'core/notification';\nimport {get_format as formatString} from 'core/str';\nimport selectBox from 'local_earlyalert/select_box';\nimport config from 'core/config';\nimport selectCourseBox from 'local_earlyalert/select_course_box';\n\nexport const init = () => {\n    alert_type_button();\n    get_users();\n    // Set up the custom message listener globally - not tied to any specific alert type\n    setup_custom_message_listener();\n};\n\n/**\n * Sets up event listeners for the custom message textarea\n * Updates the preview text and refreshes templates when the custom message changes\n */\nfunction setup_custom_message_listener() {\n    // Use class instead of ID to handle all custom message textareas\n    const customMessageTextareas = document.querySelectorAll('.early-alert-custom-message');\n    const customMessagePreviews = document.querySelectorAll('.custom-message-preview');\n\n    if (!customMessageTextareas.length || !customMessagePreviews.length) {\n        console.log('No custom message textareas or previews found');\n        return; // No elements found, exit early\n    }\n\n    console.log('Found custom message textareas:', customMessageTextareas.length);\n    console.log('Found custom message previews:', customMessagePreviews.length);\n\n    // Process each textarea to ensure all instances get event listeners\n    customMessageTextareas.forEach((textarea, index) => {\n        // Only process visible textareas\n        if (textarea.offsetParent === null) {\n            return; // Skip hidden textareas\n        }\n\n        // Clear any existing event listeners by cloning and replacing\n        const newTextarea = textarea.cloneNode(true);\n        textarea.parentNode.replaceChild(newTextarea, textarea);\n\n        // Find the closest preview element - look for one in the same container\n        const closestContainer = newTextarea.closest('.mt-3');\n        const previewElement = closestContainer ?\n                               closestContainer.querySelector('.custom-message-preview') :\n                               customMessagePreviews[0];\n\n        if (!previewElement) {\n            console.log('No preview element found for textarea');\n            return; // Skip if no preview element found\n        }\n\n        // Add event listeners to the new textarea\n        newTextarea.addEventListener('input', function() {\n            // Update the preview text without triggering template updates\n            const message = newTextarea.value.trim();\n            console.log('Custom message input event:', message);\n\n            // Update the preview span\n            previewElement.textContent = message ? `: \"${message.substring(0, 50)}${message.length > 50 ? '...' : ''}\"` : '';\n\n            // Update the global template cache immediately\n            if (window.currentTemplateCache) {\n                window.currentTemplateCache.set('custom_message', message);\n                console.log('Updated template cache with custom message:', message);\n            }\n        });\n\n        // Only update templates when focus is lost (reduces processing during typing)\n        newTextarea.addEventListener('blur', function() {\n            // Get the current template cache and re-process templates\n            const message = newTextarea.value.trim();\n            console.log('Custom message blur event:', message);\n            const alert_type = document.getElementById('early-alert-alert-type').value;\n\n            // Force update the template cache with the latest message\n            const templateCache = build_template_cache();\n\n            if (alert_type === 'assign') {\n                console.log('Processing assignment alert type with title:', document.getElementById('early-alert-assignment-title').value);\n                // For assignment alert type\n                const assignmentTitle = document.getElementById('early-alert-assignment-title').value || '';\n                templateCache.set('assignment_title', assignmentTitle);\n                setup_preview_emails_with_titles(templateCache);\n            } else {\n                console.log('Processing other alert types');\n                // For other alert types\n                setup_preview_buttons(templateCache);\n            }\n        });\n\n        // Trigger input event to update preview on initialization\n        const event = new Event('input');\n        newTextarea.dispatchEvent(event);\n    });\n}\n\n// Helper function to rebuild the template cache\nfunction build_template_cache() {\n    const cachedArrayElement = document.getElementById('early-alert-template-cache');\n    const cachedArray = JSON.parse(cachedArrayElement.value);\n    const course_name = document.getElementById('early_alert_course_name').value;\n\n    // Get the current alert type\n    const alert_type = document.getElementById('early-alert-alert-type').value;\n    let customMessage = '';\n\n    // Find the active/visible custom message textarea and get its value\n    const customMessageTextareas = document.querySelectorAll('.early-alert-custom-message');\n    if (customMessageTextareas.length) {\n        // Look for visible textarea\n        for (let i = 0; i < customMessageTextareas.length; i++) {\n            // Check if this textarea is visible (part of the current DOM layout)\n            if (customMessageTextareas[i].offsetParent !== null) {\n                customMessage = customMessageTextareas[i].value.trim();\n                console.log('Found visible textarea with message:', customMessage);\n                break;\n            }\n        }\n\n        // If no visible textarea found, fallback to the first one\n        if (customMessage === '' && customMessageTextareas[0]) {\n            customMessage = customMessageTextareas[0].value.trim();\n            console.log('Using first textarea with message:', customMessage);\n        }\n    }\n\n    // Create a new cache\n    var finalCache = new Map();\n\n    // Add the essentials\n    finalCache.set('course_name', course_name);\n    finalCache.set('custom_message', customMessage);\n    console.log('Setting custom_message in template cache:', customMessage);\n\n    // We need to preserve all existing templates in the cache\n    const currentCache = window.currentTemplateCache || {};\n\n    // If we have a current cache with templates, use that as our base\n    if (currentCache && typeof currentCache.forEach === 'function') {\n        currentCache.forEach((value, key) => {\n            if (key !== 'course_name' && key !== 'custom_message' && key !== 'assignment_title') {\n                finalCache.set(key, value);\n            }\n        });\n    }\n\n    // Update the global cache reference for future use\n    window.currentTemplateCache = finalCache;\n\n    return finalCache;\n}\n\nfunction alert_type_button() {\n    // Get data-link when .early-alert-type-button link is clicked\n    document.addEventListener('click', function (event) {\n        if (event.target.classList.contains('early-alert-type-button')) {\n            let alert_type = event.target.getAttribute('data-link');\n            let course_name = event.target.getAttribute('data-name');\n            let course_id = event.target.getAttribute('data-course_id');\n            let teacher_user_id = document.getElementById('early-alert-teacher-user-id').value;\n            // console.log('teacher_user_id:', teacher_user_id);\n            // Get student list based on alert type\n            setup_filter_students_by_grade(course_id, 9, course_name, alert_type, teacher_user_id);\n        }\n    });\n}\n\n\n/**\n * Adds students with grades\n */\n\nfunction filter_students_by_grade_select() {\n\n    // Get the s delected grade value from the dropdown\n    const grade_select = document.getElementById('id_early_alert_filter_grade_select') || {};\n    const course_id = document.getElementById('early_alert_filter_course_id').value;\n    const course_name = document.getElementById('early_alert_course_name').value;\n    const alert_type = document.getElementById('early-alert-alert-type').value;\n    const teacher_user_id = document.getElementById('early-alert-teacher-user-id').value;\n    // setup listener for drop down selection\n    grade_select.addEventListener('change', function (e) {\n        let grade_letter_id = e.target.value;\n        setup_filter_students_by_grade(course_id, grade_letter_id, course_name, alert_type, teacher_user_id);\n\n    });\n}\n\nfunction filter_students_by_assignment() {\n    // Get the selected grade value from the dropdown\n    const grade_select = document.getElementById('id_early_alert_filter_grade_select') || {};\n    const course_id = document.getElementById('early_alert_filter_course_id').value;\n    const course_name = document.getElementById('early_alert_course_name').value;\n    const alert_type = document.getElementById('early-alert-alert-type').value;\n    const teacher_user_id = document.getElementById('early-alert-teacher-user-id').value;\n\n    // Setup listener for assignment title input\n    const assignment_input = document.getElementById('early-alert-assignment-title');\n\n    // Add an input event listener for real-time preview of the assignment title\n    assignment_input.addEventListener('input', function() {\n        const title = assignment_input.value.trim();\n        const assignmentPreview = document.getElementById('assignment-title-preview');\n        if (assignmentPreview) {\n            assignmentPreview.textContent = title ? `: \"${title.substring(0, 50)}${title.length > 50 ? '...' : ''}\"` : '';\n        }\n\n        // Validate the assignment title\n        validateAssignmentTitle(title);\n    });\n\n    // Only update the full preview on focus out to reduce processing\n    assignment_input.addEventListener('focusout', function(evt) {\n        var assignment_title = assignment_input.value.trim();\n\n        // Validate the assignment title\n        if (validateAssignmentTitle(assignment_title)) {\n            setup_filter_students_by_grade(course_id, '9', course_name, alert_type, teacher_user_id, assignment_title);\n        }\n    });\n    validateAssignmentTitle(assignment_input.value.trim());\n}\n\n/**\n * Fetches the student list based on the course_id and grade_letter_id\n * @param course_id\n * @param grade_letter_id\n * @param course_name\n * @param alert_type\n */\nfunction setup_filter_students_by_grade(course_id, grade_letter_id, course_name, alert_type, teacher_user_id, assignment_title = \"\") {\n    let selected_students = [];\n    // convert course_id into an integer\n    course_id = parseInt(course_id);\n    grade_letter_id = parseInt(grade_letter_id);\n    // Add course_id to element with id early_alert_filter_course_id\n    document.getElementById('early_alert_filter_course_id').value = course_id;\n    // Add alert type to element with id early-alert-alert-type\n    document.getElementById('early-alert-alert-type').value = alert_type;\n    // Add course name to element with id early_alert_course_name\n    document.getElementById('early_alert_course_name').value = course_name;\n\n    // Only display if course_id is greater than 0\n    if (course_id > 0) {\n        //Show loader\n        Templates.render('local_earlyalert/loader', {})\n            .then(function (html, js) {\n                // Insert the rendered template into the target element\n                document.getElementById('early-alert-student-results').innerHTML = html;\n                Templates.runTemplateJS(js);\n            })\n            .catch(function (error) {\n                console.error('Failed to render template:', error);\n            });\n\n        var finalCache = new Map();\n\n        // Fetch student list and templates\n        var get_grades_and_templates = ajax.call([\n            {methodname: 'earlyalert_course_grades_percent_get', args: {\"id\": course_id, \"grade_letter_id\": grade_letter_id, \"teacher_user_id\": teacher_user_id}},\n            {methodname: 'earlyalert_course_student_templates', args: {\"teacher_user_id\": teacher_user_id, \"id\": course_id, \"alert_type\": alert_type}}\n        ]);\n        Promise.all(get_grades_and_templates)\n            .then(([grades_response, templates_response]) => {\n                // console.log('grade response1: ' , grades_response);\n                // console.log('template response1: ' , templates_response);\n                // Reformat the data to display in a grid\n                let num_students = grades_response.length;\n                // console.log('Number of students returned: ' + num_students);\n                // Calculate the number of rows and columns for the grid\n                let num_rows = Math.min(3, Math.ceil(num_students / 3));\n                let num_cols = Math.ceil(num_students / num_rows);\n                let display_data = {\n                    num_rows: num_rows,\n                    num_cols: num_cols,\n                    student_rows: []\n                };\n\n                let templates = [];\n\n                // Initialize rows array\n                for (let r = 0; r < num_rows; r++) {\n                    display_data.student_rows[r] = {students: []};\n                }\n\n                let row = 0;\n                let col = 0;\n\n                grades_response.forEach(result => {\n                    // Generating keys for templates with course_id, lang, and idnumber - each template is pulled/created for a student based on their campus/lang/facutly/major\n                    if (typeof result === 'object') {\n                        if (!templates.includes('course_' + course_id + '_' + result.lang + '_' + result.idnumber)) {\n                            var course_lang = 'course_' + course_id + '_' + result.lang + '_' + result.idnumber;\n                            templates.push(course_lang);\n                        }\n\n                        if (!templates.includes(result.campus + '_' + result.lang + '_' + result.idnumber)) {\n                            var campus_lang = result.campus + '_' + result.lang + '_' + result.idnumber;\n                            templates.push(campus_lang);\n                        }\n\n                        if (!templates.includes(result.campus + \"_\" + result.faculty + '_' + result.lang + '_' + result.idnumber)) {\n                            var campus_fac_lang = result.campus + \"_\" + result.faculty + '_' + result.lang + '_' + result.idnumber;\n                            templates.push(campus_fac_lang);\n                        }\n\n                        if (!templates.includes(result.campus + \"_\" + result.faculty + \"_\" + result.major + '_' + result.lang + '_' + result.idnumber)) {\n                            var campus_fac_maj_lang = result.campus + \"_\" + result.faculty + \"_\" + result.major + '_' + result.lang + '_' + result.idnumber;\n                            templates.push(campus_fac_maj_lang);\n                        }\n\n                        result.faculty = result.faculty ? result.faculty : '';\n                        result.major = result.major ? result.major : '';\n                        result.campus = result.campus ? result.campus : '';\n                        result.courseid = course_id;\n                        display_data.student_rows[row].students[col] = result;\n                        col++;\n                        if (col === num_cols) {\n                            col = 0;\n                            row++;\n                        }\n                    }\n                });\n\n                display_data.templates = JSON.stringify(templates);\n\n                if (alert_type === 'grade') {\n                    // Add alert_type to display_data\n                    display_data.alert_type = 'Low Grade';\n                    display_data.grade = true;\n                }\n\n                if (alert_type === 'assign') {\n                    // Add alert_type to display_data\n                    display_data.alert_type = 'Missed Assignment';\n                    display_data.assign = true;\n                }\n\n                if (alert_type === 'exam') {\n                    // Add alert_type to display_data\n                    display_data.alert_type = 'Missed Exam';\n                    display_data.exam = true;\n                }\n\n                display_data.fullname = course_name;\n                // Render the template with display_data\n                Templates.render('local_earlyalert/course_student_list', display_data)\n                    .then(function (html, js) {\n                        // Insert the rendered template into the target element\n                        document.getElementById('early-alert-student-results').innerHTML = html;\n                        Templates.runTemplateJS(js);\n                        // set default grade letter selected\n                        if (alert_type === 'grade') {\n                            let grade_select = document.getElementById('id_early_alert_filter_grade_select') || {};\n                            grade_select.value = grade_letter_id;\n                            // setup listener for filtering students by grade drop down\n                            filter_students_by_grade_select();\n                        }\n                        if (alert_type === 'assign') {\n                            document.getElementById('early-alert-assignment-title').value = assignment_title;\n                            // Setup assignment field validation and event handlers\n                            filter_students_by_assignment();\n                        }\n\n                        check_allnone_listener(selected_students);\n                        const cachedArrayElement = document.getElementById('early-alert-template-cache');\n                        const cachedArray = JSON.parse(cachedArrayElement.value);\n\n                        templates_response.forEach(result => {\n                            if (typeof result === 'object') {\n                                if (cachedArray.includes(result.templateKey)) {\n                                    let finalMessage = {\n                                        subject: result.subject,\n                                        message: result.message,\n                                        templateid: result.templateid,\n                                        revision_id: result.revision_id,\n                                        course_id: result.course_id,\n                                        instructor_id: result.instructor_id,\n                                        triggered_from_user_id: result.triggered_from_user_id,\n                                    };\n                                    finalCache.set(result.templateKey, finalMessage);\n                                }\n                            }\n                        });\n                        finalCache.set('course_name', course_name);\n\n                        // Store the cache globally so we can access it later when the custom message changes\n                        window.currentTemplateCache = finalCache;\n\n                        // case where assignment titles are taken from user input\n                        if (alert_type === 'assign') // we have to setup the assignment title before previewing!\n                        {\n                            finalCache.set('assignment_title', assignment_title);\n                            if (assignment_title) { // there is a case where previews were setup without titles then dont create modals\n                                setup_preview_emails_with_titles(finalCache); // call back function\n                            }\n\n                        } else { // for other alert types\n                            // built templates with template keys sent to setup previews\n                            setup_preview_buttons(finalCache);\n                        }\n                    })\n                    .catch(function (error) {\n                        console.error('Failed to render template:', error);\n                    });\n            });\n    }\n}\n"],"names":["filter_students_by_grade_select","grade_select","document","getElementById","course_id","value","course_name","alert_type","teacher_user_id","addEventListener","e","grade_letter_id","target","setup_filter_students_by_grade","filter_students_by_assignment","assignment_input","title","trim","assignmentPreview","textContent","substring","length","validateAssignmentTitle","evt","assignment_title","selected_students","parseInt","render","then","html","js","innerHTML","runTemplateJS","catch","error","console","finalCache","Map","get_grades_and_templates","ajax","call","methodname","args","Promise","all","_ref","grades_response","templates_response","num_students","num_rows","Math","min","ceil","num_cols","display_data","student_rows","templates","r","students","row","col","forEach","result","includes","lang","idnumber","course_lang","push","campus","campus_lang","faculty","campus_fac_lang","major","campus_fac_maj_lang","courseid","JSON","stringify","grade","assign","exam","fullname","check_allnone_listener","cachedArrayElement","cachedArray","parse","templateKey","finalMessage","subject","message","templateid","revision_id","instructor_id","triggered_from_user_id","set","window","currentTemplateCache","setup_preview_emails_with_titles","setup_preview_buttons","event","classList","contains","getAttribute","get_users","customMessageTextareas","querySelectorAll","customMessagePreviews","log","textarea","index","offsetParent","newTextarea","cloneNode","parentNode","replaceChild","closestContainer","closest","previewElement","querySelector","templateCache","customMessage","i","currentCache","key","build_template_cache","assignmentTitle","Event","dispatchEvent","setup_custom_message_listener"],"mappings":"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"}