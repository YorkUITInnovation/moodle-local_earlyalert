{"version":3,"file":"filter_students_grade.min.js","sources":["../src/filter_students_grade.js"],"sourcesContent":["import ajax from 'core/ajax';\nimport Templates from 'core/templates';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport {get_string as getString} from 'core/str';\nimport notification from 'core/notification';\nimport {get_format as formatString} from 'core/str';\nimport selectBox from 'local_earlyalert/select_box';\nimport config from 'core/config';\nimport selectCourseBox from 'local_earlyalert/select_course_box';\n\nexport const init = () => {\n    alert_type_button();\n    get_users();\n    // Set up the custom message listener globally - not tied to any specific alert type\n    setup_custom_message_listener();\n};\n\n/**\n * Sets up event listeners for the custom message textarea\n * Updates the preview text and refreshes templates when the custom message changes\n */\nfunction setup_custom_message_listener() {\n    // Use class instead of ID to handle all custom message textareas\n    const customMessageTextareas = document.querySelectorAll('.early-alert-custom-message');\n    const customMessagePreviews = document.querySelectorAll('.custom-message-preview');\n\n    if (!customMessageTextareas.length || !customMessagePreviews.length) {\n        console.log('No custom message textareas or previews found');\n        return; // No elements found, exit early\n    }\n\n    console.log('Found custom message textareas:', customMessageTextareas.length);\n    console.log('Found custom message previews:', customMessagePreviews.length);\n\n    // Process each textarea to ensure all instances get event listeners\n    customMessageTextareas.forEach((textarea, index) => {\n        // Only process visible textareas\n        if (textarea.offsetParent === null) {\n            return; // Skip hidden textareas\n        }\n\n        // Clear any existing event listeners by cloning and replacing\n        const newTextarea = textarea.cloneNode(true);\n        textarea.parentNode.replaceChild(newTextarea, textarea);\n\n        // Find the closest preview element - look for one in the same container\n        const closestContainer = newTextarea.closest('.mt-3');\n        const previewElement = closestContainer ?\n                               closestContainer.querySelector('.custom-message-preview') :\n                               customMessagePreviews[0];\n\n        if (!previewElement) {\n            console.log('No preview element found for textarea');\n            return; // Skip if no preview element found\n        }\n\n        // Add event listeners to the new textarea\n        newTextarea.addEventListener('input', function() {\n            // Update the preview text without triggering template updates\n            const message = newTextarea.value.trim();\n            console.log('Custom message input event:', message);\n\n            // Update the preview span\n            previewElement.textContent = message ? `: \"${message.substring(0, 50)}${message.length > 50 ? '...' : ''}\"` : '';\n\n            // Update the global template cache immediately\n            if (window.currentTemplateCache) {\n                window.currentTemplateCache.set('custom_message', message);\n                console.log('Updated template cache with custom message:', message);\n            }\n        });\n\n        // Only update templates when focus is lost (reduces processing during typing)\n        newTextarea.addEventListener('blur', function() {\n            // Get the current template cache and re-process templates\n            const message = newTextarea.value.trim();\n            console.log('Custom message blur event:', message);\n            const alert_type = document.getElementById('early-alert-alert-type').value;\n\n            // Force update the template cache with the latest message\n            const templateCache = build_template_cache();\n\n            if (alert_type === 'assign') {\n                console.log('Processing assignment alert type with title:', document.getElementById('early-alert-assignment-title').value);\n                // For assignment alert type\n                const assignmentTitle = document.getElementById('early-alert-assignment-title').value || '';\n                templateCache.set('assignment_title', assignmentTitle);\n                setup_preview_emails_with_titles(templateCache);\n            } else {\n                console.log('Processing other alert types');\n                // For other alert types\n                setup_preview_buttons(templateCache);\n            }\n        });\n\n        // Trigger input event to update preview on initialization\n        const event = new Event('input');\n        newTextarea.dispatchEvent(event);\n    });\n}\n\n// Helper function to rebuild the template cache\nfunction build_template_cache() {\n    const cachedArrayElement = document.getElementById('early-alert-template-cache');\n    const cachedArray = JSON.parse(cachedArrayElement.value);\n    const course_name = document.getElementById('early_alert_course_name').value;\n\n    // Get the current alert type\n    const alert_type = document.getElementById('early-alert-alert-type').value;\n    let customMessage = '';\n\n    // Find the active/visible custom message textarea and get its value\n    const customMessageTextareas = document.querySelectorAll('.early-alert-custom-message');\n    if (customMessageTextareas.length) {\n        // Look for visible textarea\n        for (let i = 0; i < customMessageTextareas.length; i++) {\n            // Check if this textarea is visible (part of the current DOM layout)\n            if (customMessageTextareas[i].offsetParent !== null) {\n                customMessage = customMessageTextareas[i].value.trim();\n                console.log('Found visible textarea with message:', customMessage);\n                break;\n            }\n        }\n\n        // If no visible textarea found, fallback to the first one\n        if (customMessage === '' && customMessageTextareas[0]) {\n            customMessage = customMessageTextareas[0].value.trim();\n            console.log('Using first textarea with message:', customMessage);\n        }\n    }\n\n    // Create a new cache\n    var finalCache = new Map();\n\n    // Add the essentials\n    finalCache.set('course_name', course_name);\n    finalCache.set('custom_message', customMessage);\n    console.log('Setting custom_message in template cache:', customMessage);\n\n    // We need to preserve all existing templates in the cache\n    const currentCache = window.currentTemplateCache || {};\n\n    // If we have a current cache with templates, use that as our base\n    if (currentCache && typeof currentCache.forEach === 'function') {\n        currentCache.forEach((value, key) => {\n            if (key !== 'course_name' && key !== 'custom_message' && key !== 'assignment_title') {\n                finalCache.set(key, value);\n            }\n        });\n    }\n\n    // Update the global cache reference for future use\n    window.currentTemplateCache = finalCache;\n\n    return finalCache;\n}\n\nfunction alert_type_button() {\n    // Get data-link when .early-alert-type-button link is clicked\n    document.addEventListener('click', function (event) {\n        if (event.target.classList.contains('early-alert-type-button')) {\n            let alert_type = event.target.getAttribute('data-link');\n            let course_name = event.target.getAttribute('data-name');\n            let course_id = event.target.getAttribute('data-course_id');\n            let teacher_user_id = document.getElementById('early-alert-teacher-user-id').value;\n            // console.log('teacher_user_id:', teacher_user_id);\n            // Get student list based on alert type\n            setup_filter_students_by_grade(course_id, 9, course_name, alert_type, teacher_user_id);\n        }\n    });\n}\n\n\n/**\n * Adds students with grades\n */\n\nfunction filter_students_by_grade_select() {\n\n    // Get the s delected grade value from the dropdown\n    const grade_select = document.getElementById('id_early_alert_filter_grade_select') || {};\n    const course_id = document.getElementById('early_alert_filter_course_id').value;\n    const course_name = document.getElementById('early_alert_course_name').value;\n    const alert_type = document.getElementById('early-alert-alert-type').value;\n    const teacher_user_id = document.getElementById('early-alert-teacher-user-id').value;\n    // setup listener for drop down selection\n    grade_select.addEventListener('change', function (e) {\n        let grade_letter_id = e.target.value;\n        setup_filter_students_by_grade(course_id, grade_letter_id, course_name, alert_type, teacher_user_id);\n\n    });\n}\n\nfunction filter_students_by_assignment() {\n    // Get the selected grade value from the dropdown\n    const grade_select = document.getElementById('id_early_alert_filter_grade_select') || {};\n    const course_id = document.getElementById('early_alert_filter_course_id').value;\n    const course_name = document.getElementById('early_alert_course_name').value;\n    const alert_type = document.getElementById('early-alert-alert-type').value;\n    const teacher_user_id = document.getElementById('early-alert-teacher-user-id').value;\n\n    // Setup listener for assignment title input\n    const assignment_input = document.getElementById('early-alert-assignment-title');\n\n    // Add an input event listener for real-time preview of the assignment title\n    assignment_input.addEventListener('input', function() {\n        const title = assignment_input.value.trim();\n        const assignmentPreview = document.getElementById('assignment-title-preview');\n        if (assignmentPreview) {\n            assignmentPreview.textContent = title ? `: \"${title.substring(0, 50)}${title.length > 50 ? '...' : ''}\"` : '';\n        }\n\n        // Validate the assignment title\n        validateAssignmentTitle(title);\n    });\n\n    // Only update the full preview on focus out to reduce processing\n    assignment_input.addEventListener('focusout', function(evt) {\n        var assignment_title = assignment_input.value.trim();\n\n        // Validate the assignment title\n        if (validateAssignmentTitle(assignment_title)) {\n            setup_filter_students_by_grade(course_id, '9', course_name, alert_type, teacher_user_id, assignment_title);\n        }\n    });\n    validateAssignmentTitle(assignment_input.value.trim());\n}\n\n/**\n * Fetches the student list based on the course_id and grade_letter_id\n * @param course_id\n * @param grade_letter_id\n * @param course_name\n * @param alert_type\n */\nfunction setup_filter_students_by_grade(course_id, grade_letter_id, course_name, alert_type, teacher_user_id, assignment_title = \"\") {\n    let selected_students = [];\n    // convert course_id into an integer\n    course_id = parseInt(course_id);\n    grade_letter_id = parseInt(grade_letter_id);\n    // Add course_id to element with id early_alert_filter_course_id\n    document.getElementById('early_alert_filter_course_id').value = course_id;\n    // Add alert type to element with id early-alert-alert-type\n    document.getElementById('early-alert-alert-type').value = alert_type;\n    // Add course name to element with id early_alert_course_name\n    document.getElementById('early_alert_course_name').value = course_name;\n\n    // Only display if course_id is greater than 0\n    if (course_id > 0) {\n        //Show loader\n        Templates.render('local_earlyalert/loader', {})\n            .then(function (html, js) {\n                // Insert the rendered template into the target element\n                document.getElementById('early-alert-student-results').innerHTML = html;\n                Templates.runTemplateJS(js);\n            })\n            .catch(function (error) {\n                console.error('Failed to render template:', error);\n            });\n\n        var finalCache = new Map();\n\n        // Fetch student list and templates\n        var get_grades_and_templates = ajax.call([\n            {methodname: 'earlyalert_course_grades_percent_get', args: {\"id\": course_id, \"grade_letter_id\": grade_letter_id, \"teacher_user_id\": teacher_user_id}},\n            {methodname: 'earlyalert_course_student_templates', args: {\"teacher_user_id\": teacher_user_id, \"id\": course_id, \"alert_type\": alert_type}}\n        ]);\n        Promise.all(get_grades_and_templates)\n            .then(([grades_response, templates_response]) => {\n                // console.log('grade response1: ' , grades_response);\n                // console.log('template response1: ' , templates_response);\n                // Reformat the data to display in a grid\n                let num_students = grades_response.length;\n                // console.log('Number of students returned: ' + num_students);\n                // Calculate the number of rows and columns for the grid\n                let num_rows = Math.min(3, Math.ceil(num_students / 3));\n                let num_cols = Math.ceil(num_students / num_rows);\n                let display_data = {\n                    num_rows: num_rows,\n                    num_cols: num_cols,\n                    student_rows: []\n                };\n\n                let templates = [];\n\n                // Initialize rows array\n                for (let r = 0; r < num_rows; r++) {\n                    display_data.student_rows[r] = {students: []};\n                }\n\n                let row = 0;\n                let col = 0;\n\n                grades_response.forEach(result => {\n                    // Generating keys for templates with course_id, lang, and idnumber - each template is pulled/created for a student based on their campus/lang/facutly/major\n                    if (typeof result === 'object') {\n                        if (!templates.includes('course_' + course_id + '_' + result.lang + '_' + result.idnumber)) {\n                            var course_lang = 'course_' + course_id + '_' + result.lang + '_' + result.idnumber;\n                            templates.push(course_lang);\n                        }\n\n                        if (!templates.includes(result.campus + '_' + result.lang + '_' + result.idnumber)) {\n                            var campus_lang = result.campus + '_' + result.lang + '_' + result.idnumber;\n                            templates.push(campus_lang);\n                        }\n\n                        if (!templates.includes(result.campus + \"_\" + result.faculty + '_' + result.lang + '_' + result.idnumber)) {\n                            var campus_fac_lang = result.campus + \"_\" + result.faculty + '_' + result.lang + '_' + result.idnumber;\n                            templates.push(campus_fac_lang);\n                        }\n\n                        if (!templates.includes(result.campus + \"_\" + result.faculty + \"_\" + result.major + '_' + result.lang + '_' + result.idnumber)) {\n                            var campus_fac_maj_lang = result.campus + \"_\" + result.faculty + \"_\" + result.major + '_' + result.lang + '_' + result.idnumber;\n                            templates.push(campus_fac_maj_lang);\n                        }\n\n                        result.faculty = result.faculty ? result.faculty : '';\n                        result.major = result.major ? result.major : '';\n                        result.campus = result.campus ? result.campus : '';\n                        result.courseid = course_id;\n                        display_data.student_rows[row].students[col] = result;\n                        col++;\n                        if (col === num_cols) {\n                            col = 0;\n                            row++;\n                        }\n                    }\n                });\n\n                display_data.templates = JSON.stringify(templates);\n\n                if (alert_type === 'grade') {\n                    // Add alert_type to display_data\n                    display_data.alert_type = 'Low Grade';\n                    display_data.grade = true;\n                }\n\n                if (alert_type === 'assign') {\n                    // Add alert_type to display_data\n                    display_data.alert_type = 'Missed Assignment';\n                    display_data.assign = true;\n                }\n\n                if (alert_type === 'exam') {\n                    // Add alert_type to display_data\n                    display_data.alert_type = 'Missed Exam';\n                    display_data.exam = true;\n                }\n\n                display_data.fullname = course_name;\n                // Render the template with display_data\n                Templates.render('local_earlyalert/course_student_list', display_data)\n                    .then(function (html, js) {\n                        // Insert the rendered template into the target element\n                        document.getElementById('early-alert-student-results').innerHTML = html;\n                        Templates.runTemplateJS(js);\n                        // (Re)attach custom message listeners now that the textarea(s) exist in DOM\n                        setup_custom_message_listener();\n                        // set default grade letter selected\n                        if (alert_type === 'grade') {\n                            let grade_select = document.getElementById('id_early_alert_filter_grade_select') || {};\n                            grade_select.value = grade_letter_id;\n                            // setup listener for filtering students by grade drop down\n                            filter_students_by_grade_select();\n                        }\n                        if (alert_type === 'assign') {\n                            document.getElementById('early-alert-assignment-title').value = assignment_title;\n                            // Setup assignment field validation and event handlers\n                            filter_students_by_assignment();\n                        }\n\n                        check_allnone_listener(selected_students);\n                        const cachedArrayElement = document.getElementById('early-alert-template-cache');\n                        const cachedArray = JSON.parse(cachedArrayElement.value);\n\n                        templates_response.forEach(result => {\n                            if (typeof result === 'object') {\n                                if (cachedArray.includes(result.templateKey)) {\n                                    let finalMessage = {\n                                        subject: result.subject,\n                                        message: result.message,\n                                        templateid: result.templateid,\n                                        revision_id: result.revision_id,\n                                        course_id: result.course_id,\n                                        instructor_id: result.instructor_id,\n                                        triggered_from_user_id: result.triggered_from_user_id,\n                                    };\n                                    finalCache.set(result.templateKey, finalMessage);\n                                }\n                            }\n                        });\n                        finalCache.set('course_name', course_name);\n                        // Ensure custom_message key exists even before user types so downstream lookups never get undefined\n                        if (!finalCache.has('custom_message')) {\n                            finalCache.set('custom_message', '');\n                        }\n\n                        // Store the cache globally so we can access it later when the custom message changes\n                        window.currentTemplateCache = finalCache;\n\n                        // case where assignment titles are taken from user input\n                        if (alert_type === 'assign') // we have to setup the assignment title before previewing!\n                        {\n                            finalCache.set('assignment_title', assignment_title);\n                            if (assignment_title) { // there is a case where previews were setup without titles then dont create modals\n                                setup_preview_emails_with_titles(finalCache); // call back function\n                            }\n\n                        } else { // for other alert types\n                            // built templates with template keys sent to setup previews\n                            setup_preview_buttons(finalCache);\n                        }\n                    })\n                    .catch(function (error) {\n                        console.error('Failed to render template:', error);\n                    });\n            });\n    }\n}\n\nfunction check_all_student_grades(selected_students) {\n    const student_ids_selected = document.getElementById(\"early-alert-student-ids\") || {};\n    student_ids_selected.value = [];\n    const check_all_none_checkbox = document.getElementById('early-alert-checkall-student-checkbox');\n    check_all_none_checkbox.checked = true;\n    //check box for grade showing - remove later\n    const student_checkboxes = document.querySelectorAll(\"input[class^='early-alert-student-checkbox']\");\n    // check box for grade showing - remove later\n    student_checkboxes.forEach(function (checkbox) {\n        checkbox.checked = true;\n        selected_students.push(checkbox.getAttribute('data-student-id'));\n    });\n    student_ids_selected.value = JSON.stringify(selected_students);\n}\n\n// function to save to hidden field on submit if anyone unchecks student records\nfunction check_individual_students_checkboxes_for_submit() {\n    let selected_students = [];\n    const student_ids_selected = document.getElementById(\"early-alert-student-ids\") || {};\n    const student_checkboxes = document.querySelectorAll(\"input[class^='early-alert-student-checkbox']\");\n    student_checkboxes.forEach(function (checkbox) {\n        if (checkbox.checked) {\n            selected_students.push(checkbox.getAttribute('data-student-id'));\n        }\n    });\n    student_ids_selected.value = JSON.stringify(selected_students);\n}\n\nfunction check_allnone_listener(selected_students) {\n    // Add an event listener to the select all checkbox\n    const check_all_none_checkbox = document.getElementById('early-alert-checkall-student-checkbox');\n    const student_ids_selected = document.getElementById(\"early-alert-student-ids\") || {};\n\n    check_all_none_checkbox.addEventListener('click', function () {\n        student_ids_selected.value = [];\n        // Get all checkboxes within the list\n        let checkboxes = document.querySelectorAll(\"input[class^='early-alert-student-checkbox']\");\n        // Loop through each checkbox and toggle its selection based on the state of the select all checkbox\n        checkboxes.forEach(function (checkbox) {\n            if (check_all_none_checkbox.checked) {\n                checkbox.checked = true;\n                selected_students.push(checkbox.getAttribute('data-student-id'));\n            } else {\n                checkbox.checked = false;\n                selected_students = selected_students.filter(item => item !== checkbox.getAttribute('data-student-id'));\n            }\n        });\n        student_ids_selected.value = JSON.stringify(selected_students);\n    });\n}\n\n/**\n * Validates the assignment title and updates UI accordingly\n * @param {string} title - The assignment title to validate\n * @returns {boolean} - Whether the title is valid\n */\nfunction validateAssignmentTitle(title) {\n    const errorElement = document.getElementById('assignment-title-error');\n    const sendButtons = document.querySelectorAll('.early-alert-send-button');\n    const previewButtons = document.querySelectorAll('.early-alert-preview-button');\n\n    if (!title) {\n        // Title is required - show error and disable buttons\n        if (errorElement) {\n            errorElement.style.display = 'block';\n        }\n\n        // Disable send and preview buttons\n        sendButtons.forEach(button => {\n            button.disabled = true;\n            button.title = 'Assignment title is required';\n        });\n\n        previewButtons.forEach(button => {\n            button.disabled = true;\n            button.classList.add('disabled');\n            button.title = 'Assignment title is required';\n        });\n\n        return false;\n    } else {\n        // Title is valid - hide error and enable buttons\n        if (errorElement) {\n            errorElement.style.display = 'none';\n        }\n\n        // Enable send and preview buttons\n        sendButtons.forEach(button => {\n            button.disabled = false;\n            button.title = '';\n        });\n\n        previewButtons.forEach(button => {\n            button.disabled = false;\n            button.classList.remove('disabled');\n            button.title = '';\n        });\n\n        return true;\n    }\n}\n\nfunction setup_preview_buttons(templateCache) {\n    // Get the early-alert-alert-type value\n    const alert_type = document.getElementById('early-alert-alert-type').value;\n\n    // Get the custom message from the template cache\n    const custom_message = templateCache.get('custom_message') || '';\n\n    // Store ALL the student data and template cache etc when its processed\n    let student_template_cache_array = [];\n\n    // Remove any existing click event listeners from preview buttons first\n    const preview_buttons = document.querySelectorAll(\".early-alert-preview-button\");\n    preview_buttons.forEach(button => {\n        const clone = button.cloneNode(true);\n        button.parentNode.replaceChild(clone, button);\n    });\n\n    // Now add new event listeners\n    const fresh_buttons = document.querySelectorAll(\".early-alert-preview-button\");\n    fresh_buttons.forEach(function (button) {\n        let record_data = {};\n        const checkbox = button.closest('tr').querySelector('.early-alert-student-checkbox');\n        const assigngrade = button.closest('tr').querySelector('.early-alert-grade-column').querySelector('.badge').innerHTML;\n        let selected_grade = '';\n        let selected_grade_value = 0;\n        if (alert_type === 'grade') { // we only use grade/select etc in this alert type\n            const grade_select = document.getElementById('id_early_alert_filter_grade_select') || {};\n            selected_grade = grade_select.options[grade_select.selectedIndex].text;\n            selected_grade_value = grade_select.value;\n        }\n\n        let templateObj = {};\n        if (checkbox) {\n            // now, access the parent <tr> element (the table row)\n            const table_row = checkbox.parentNode;\n            // extract the student name from the second <td> element within the table row\n            const student_name_td = table_row.nextElementSibling;\n            // fix and parse the name\n            const student_lname_fname = student_name_td.firstChild;\n            var student_name_arr = [];\n            var student_name = \"\";\n            student_lname_fname.data.split(/\\s*,\\s*/).forEach(function (me) {\n                student_name_arr.push(me);\n            });\n            student_name = student_name_arr[1] + ' ' + student_name_arr[0];\n\n            var student_id = checkbox.getAttribute('data-student-id');\n            var student_idnumber = checkbox.getAttribute('data-student-idnumber');\n            const studentCampusAttr = checkbox.getAttribute('data-student-campus');\n            const studentFacultyAttr = checkbox.getAttribute('data-student-faculty');\n            const studentMajorAttr = checkbox.getAttribute('data-student-major');\n            const studentLangAttr = checkbox.getAttribute('data-student-lang');\n            const courseIdAttr = checkbox.getAttribute('data-courseid');\n            // uses data found in the checkbox element attributes to create a key to find the template\n            var courseTemplateKey = 'course_' + courseIdAttr + '_' + studentLangAttr + '_' + student_idnumber;\n            var campusTemplateKey = studentCampusAttr + '_' + studentLangAttr + '_' + student_idnumber;\n            var facTemplateKey = studentCampusAttr + '_' + studentFacultyAttr + '_' + studentLangAttr + '_' + student_idnumber;\n            var deptTemplateKey = studentCampusAttr + '_' + studentFacultyAttr + '_' + studentMajorAttr + '_' + studentLangAttr + '_' + student_idnumber;\n            var templateEmailContent = '';\n            var templateEmailSubject = '';\n\n            // console.log('Course template key:', courseTemplateKey);\n            // console.log('Campus template key:', campusTemplateKey);\n            // console.log('Faculty template key:', facTemplateKey);\n            // console.log('Department template key:', deptTemplateKey);\n            //\n            // console.log('New Template cache:', templateCache);\n\n            // templateCache is checked for the template key and if found the email subject and content are set\n            if (templateCache.has(campusTemplateKey)) {\n                // console.log(\"department cache found:\", templateCache.get(campusTemplateKey));\n                templateEmailSubject = templateCache.get(campusTemplateKey).subject;\n                templateEmailContent = templateCache.get(campusTemplateKey).message;\n                templateObj = templateCache.get(campusTemplateKey);\n            }\n            else if (templateCache.has(facTemplateKey)) { // if campus template not found, check faculty template\n                if (templateCache.has(deptTemplateKey)) { // if faculty template not found but has department template use it\n                    // console.log(\"faculty cache found:\", templateCache.get(deptTemplateKey));\n                    templateEmailSubject = templateCache.get(deptTemplateKey).subject;\n                    templateEmailContent = templateCache.get(deptTemplateKey).message;\n                    templateObj = templateCache.get(deptTemplateKey);\n                } else { // revert to faculty template\n                    // console.log(\"faculty cache found:\", templateCache.get(facTemplateKey));\n                    templateEmailSubject = templateCache.get(facTemplateKey).subject;\n                    templateEmailContent = templateCache.get(facTemplateKey).message;\n                    templateObj = templateCache.get(facTemplateKey);\n                }\n            } else if (templateCache.has(deptTemplateKey)) { // if faculty template not found, check department template\n                // console.log(\"faculty cache found:\", templateCache.get(deptTemplateKey));\n                templateEmailSubject = templateCache.get(deptTemplateKey).subject;\n                templateEmailContent = templateCache.get(deptTemplateKey).message;\n                templateObj = templateCache.get(deptTemplateKey);\n            } else if (templateCache.has(courseTemplateKey)) { // lastly check for course template\n                //console.log(\"course cache found:\", templateCache.get(courseTemplateKey));\n                templateEmailSubject = templateCache.get(courseTemplateKey).subject;\n                templateEmailContent = templateCache.get(courseTemplateKey).message;\n                templateObj = templateCache.get(courseTemplateKey);\n            } else { // if no templates are found, set default values\n                templateEmailSubject = 'Template not found';\n                templateEmailContent = 'Template not found';\n            }\n\n        } else {\n            console.log(\"couldn't find checkbox\");\n        }\n\n        var assignment_title = templateCache.get('assignment_title') || '';\n\n        var params = {\n            studentname: student_name_arr,\n            assignmentgrade: assigngrade,\n            assignmenttitle: assignment_title,\n            coursename: templateCache.get('course_name'),\n            customgrade: selected_grade ? selected_grade : 'D+',\n            defaultgrade: \"D+\",\n            custommessage: custom_message\n        };\n\n        // Apply the replacements\n        var changedTemplateEmailContent = addUserInfo(templateEmailContent, params);\n\n        // Double-check that [custommessage] is definitely replaced\n        if (changedTemplateEmailContent.includes('[custommessage]')) {\n            changedTemplateEmailContent = changedTemplateEmailContent.replace('[custommessage]', custom_message || '');\n        }\n\n        // assemble record data for individual buttons which includes student and template data\n        record_data.student_id = student_id;\n        record_data.student_name = student_name;\n        record_data.course_name = templateCache.get('course_name');\n        record_data.templateEmailSubject = templateEmailSubject;\n        record_data.templateEmailContent = changedTemplateEmailContent;\n        record_data.template_id = templateObj.templateid;\n        record_data.revision_id = templateObj.revision_id;\n        record_data.triggered_from_user_id = templateObj.triggered_from_user_id;\n        record_data.target_user_id = student_id;\n        record_data.course_id = templateObj.course_id;\n        record_data.instructor_id = templateObj.instructor_id;\n        record_data.assignment_name = params.assignmenttitle;\n        record_data.actual_grade = assigngrade;\n        record_data.trigger_grade = selected_grade_value;\n\n        // case where previews are just added to grade alert type and missed exam etc\n        if (alert_type !== 'assign') {\n            button.addEventListener('click', function () {\n                //console.log('Data sent to template from template cache:', record_data);\n                setup_preview_buttons_from_template(record_data);\n            });\n        }\n        // add record to student_template_cache_array to have data to submit / email\n        student_template_cache_array.push(record_data);\n    });\n\n    // once we have all the data we can setup the emails to submit with the template cache data and student ids BUT we have to manage and select the users if they are checked/unchceked\n    setup_send_emails(student_template_cache_array);\n}\n\nfunction setup_preview_emails_with_titles(templateCache) {\n    // Get the early-alert-alert-type value\n    const alert_type = document.getElementById('early-alert-alert-type').value;\n\n    // Get the custom message from the template cache instead of directly from DOM\n    const customMessage = templateCache.get('custom_message') || '';\n\n    // store ALL the student data and template cache etc when its processed\n    let student_template_cache_array = [];\n\n    // Remove any existing click event listeners from preview buttons first\n    const preview_buttons = document.querySelectorAll(\".early-alert-preview-button\");\n    preview_buttons.forEach(button => {\n        const clone = button.cloneNode(true);\n        button.parentNode.replaceChild(clone, button);\n    });\n\n    // Now add new event listeners\n    const fresh_buttons = document.querySelectorAll(\".early-alert-preview-button\");\n    fresh_buttons.forEach(function (button) {\n        let record_data = {};\n        const checkbox = button.closest('tr').querySelector('.early-alert-student-checkbox');\n        const assigngrade = button.closest('tr').querySelector('.early-alert-grade-column').querySelector('.badge').innerHTML;\n        let selected_grade = '';\n        let selected_grade_value = 0;\n        if (alert_type === 'grade') { // we only use grade/select etc in this alert type\n            const grade_select = document.getElementById('id_early_alert_filter_grade_select') || {};\n            selected_grade = grade_select.options[grade_select.selectedIndex].text;\n            selected_grade_value = grade_select.value;\n        }\n\n        let templateObj = {};\n        if (checkbox) {\n            // now, access the parent <tr> element (the table row)\n            const table_row = checkbox.parentNode;\n            // extract the student name from the second <td> element within the table row\n            const student_name_td = table_row.nextElementSibling;\n            // fix and parse the name\n            const student_lname_fname = student_name_td.firstChild;\n            var student_name_arr = [];\n            var student_name = \"\";\n            student_lname_fname.data.split(/\\s*,\\s*/).forEach(function (me) {\n                student_name_arr.push(me);\n            });\n            student_name = student_name_arr[1] + ' ' + student_name_arr[0];\n\n            var student_id = checkbox.getAttribute('data-student-id');\n            var student_idnumber = checkbox.getAttribute('data-student-idnumber');\n            const studentCampusAttr = checkbox.getAttribute('data-student-campus');\n            const studentFacultyAttr = checkbox.getAttribute('data-student-faculty');\n            const studentMajorAttr = checkbox.getAttribute('data-student-major');\n            const studentLangAttr = checkbox.getAttribute('data-student-lang');\n            const courseIdAttr = checkbox.getAttribute('data-courseid');\n            var courseTemplateKey = 'course_' + courseIdAttr + '_' + studentLangAttr + '_' + student_idnumber;\n            var campusTemplateKey = studentCampusAttr + '_' + studentLangAttr + '_' + student_idnumber;\n            var facTemplateKey = studentCampusAttr + '_' + studentFacultyAttr + '_' + studentLangAttr + '_' + student_idnumber;\n            var deptTemplateKey = studentCampusAttr + '_' + studentFacultyAttr + '_' + studentMajorAttr+ '_' + studentLangAttr + '_' + student_idnumber;\n            var templateEmailContent = '';\n            var templateEmailSubject = '';\n\n            // console.log('PET Course template key:', courseTemplateKey);\n            // console.log('PET Campus template key:', campusTemplateKey);\n            // console.log('PET Faculty template key:', facTemplateKey);\n            // console.log('PET Department template key:', deptTemplateKey);\n\n            if (templateCache.has(campusTemplateKey)) {\n                // console.log(\"department cache found:\", templateCache.get(campusTemplateKey));\n                templateEmailSubject = templateCache.get(campusTemplateKey).subject;\n                templateEmailContent = templateCache.get(campusTemplateKey).message;\n                templateObj = templateCache.get(campusTemplateKey);\n            } else if (templateCache.has(facTemplateKey)) {\n                if (templateCache.has(deptTemplateKey)) {\n                    // console.log(\"faculty cache found:\", templateCache.get(deptTemplateKey));\n                    templateEmailSubject = templateCache.get(deptTemplateKey).subject;\n                    templateEmailContent = templateCache.get(deptTemplateKey).message;\n                    templateObj = templateCache.get(deptTemplateKey);\n                } else {\n                    // console.log(\"faculty cache found:\", templateCache.get(facTemplateKey));\n                    templateEmailSubject = templateCache.get(facTemplateKey).subject;\n                    templateEmailContent = templateCache.get(facTemplateKey).message;\n                    templateObj = templateCache.get(facTemplateKey);\n                }\n            } else if (templateCache.has(deptTemplateKey)) {\n                // console.log(\"faculty cache found:\", templateCache.get(deptTemplateKey));\n                templateEmailSubject = templateCache.get(deptTemplateKey).subject;\n                templateEmailContent = templateCache.get(deptTemplateKey).message;\n                templateObj = templateCache.get(deptTemplateKey);\n            } else if (templateCache.has(courseTemplateKey)) {\n                //console.log(\"course cache found:\", templateCache.get(courseTemplateKey));\n                templateEmailSubject = templateCache.get(courseTemplateKey).subject;\n                templateEmailContent = templateCache.get(courseTemplateKey).message;\n                templateObj = templateCache.get(courseTemplateKey);\n            } else {\n                templateEmailSubject = 'Template not found';\n                templateEmailContent = 'Template not found';\n            }\n        }\n\n        var assignment_title = templateCache.get('assignment_title') || '';\n\n        var params = {\n            studentname: student_name_arr,\n            assignmentgrade: assigngrade,\n            assignmenttitle: assignment_title,\n            coursename: templateCache.get('course_name'),\n            customgrade: selected_grade ? selected_grade : 'D+',\n            defaultgrade: \"D+\",\n            custommessage: customMessage\n        };\n\n        // Apply the replacements\n        var changedTemplateEmailContent = addUserInfo(templateEmailContent, params);\n\n        // Double-check that [custommessage] is definitely replaced\n        if (changedTemplateEmailContent.includes('[custommessage]')) {\n            changedTemplateEmailContent = changedTemplateEmailContent.replace('[custommessage]', customMessage || '');\n        }\n\n        // assemble record data for individual buttons which includes student and template data\n        record_data.student_id = student_id;\n        record_data.student_name = student_name;\n        record_data.course_name = templateCache.get('course_name');\n        record_data.templateEmailSubject = templateEmailSubject;\n        record_data.templateEmailContent = changedTemplateEmailContent;\n        record_data.template_id = templateObj.templateid;\n        record_data.revision_id = templateObj.revision_id;\n        record_data.triggered_from_user_id = templateObj.triggered_from_user_id;\n        record_data.target_user_id = student_id;\n        record_data.course_id = templateObj.course_id;\n        record_data.instructor_id = templateObj.instructor_id;\n        record_data.assignment_name = params.assignmenttitle;\n        record_data.actual_grade = assigngrade;\n        record_data.trigger_grade = selected_grade_value;\n\n        button.addEventListener('click', function () {\n            setup_preview_buttons_from_template(record_data);\n        });\n        student_template_cache_array.push(record_data);\n    });\n\n    setup_send_emails(student_template_cache_array);\n}\n\nvar current_modal = null;\n\nfunction setup_preview_buttons_from_template(student_template_data) {\n    //console.log('Modal created with: ',student_template_data);\n    ModalFactory.create({\n        title: getString('preview_email', 'local_earlyalert'),\n        type: ModalFactory.types.CANCEL,\n        body: Templates.render('local_earlyalert/preview_student_email', {\n            name: student_template_data.template_name,\n            student_name: student_template_data.student_name,\n            subject: student_template_data.templateEmailSubject,\n            message: student_template_data.templateEmailContent,\n            instructor_name: ''\n        }),\n        large: true,\n\n    }).done(modal => {\n        modal.show();\n        current_modal = modal;\n        return current_modal;\n    });\n\n}\n\nfunction setup_send_emails(student_template_cache_array) {\n    const send_button = document.getElementById('early-alert-send-button1');\n    const send_button2 = document.getElementById('early-alert-send-button2');\n    send_button.addEventListener('click', function () {\n        maintain_student_template_data_for_submit(student_template_cache_array);\n    });\n    send_button2.addEventListener('click', function () {\n        maintain_student_template_data_for_submit(student_template_cache_array);\n    });\n}\n\nfunction maintain_student_template_data_for_submit(student_template_cache_array) {\n    check_individual_students_checkboxes_for_submit();\n    var student_ids_array = JSON.parse(document.getElementById(\"early-alert-student-ids\").value); // hidden field ids\n    // remove students from template cache if they have been unchecked\n    var new_student_temp_array = student_template_cache_array.filter(student => student_ids_array.includes(student.student_id));\n    new_student_temp_array.length > 0 ? create_notification_dialog(new_student_temp_array) : alert('No students selected');\n}\n\nfunction create_notification_dialog(student_template_cache_array) {\n\n    // Get the data id attribute value\n    var send_string = getString('send_email', 'local_earlyalert');\n    var send_dialog_text = getString('send_dialog_text', 'local_earlyalert');\n    var send = getString('send', 'local_earlyalert');\n    var cancel = getString('cancel', 'local_earlyalert');\n    var could_not_send_email = getString('could_not_send_email', 'local_earlyalert');\n    var sent_dialog_text = getString('sent_dialog_text', 'local_earlyalert');\n\n    // Notification\n    notification.confirm(send_string, send_dialog_text, send, cancel, function () {\n\n        // send emails and save records\n        var sendEmail = ajax.call([{\n            methodname: 'earlyalert_report_log_insert',\n            args: {\n                template_data: JSON.stringify(student_template_cache_array),\n            }\n        }]);\n        sendEmail[0].done(function () {\n            // success\n            sendEmail[0].then(result => {\n                    notification.alert('Email', getString('sent_dialog_text', 'local_earlyalert', result));\n                }\n            );\n        }).fail(function () {\n            notification.alert(could_not_send_email);\n        });\n    });\n}\n\nfunction get_users() {\n    const params = new URLSearchParams(window.location.search);\n    let user_id = params.get('user_id');\n    // If user_id is not in URL, use the hidden input value (logged-in user)\n    if (!user_id) {\n        const teacherUserIdInput = document.getElementById('early-alert-teacher-user-id');\n        if (teacherUserIdInput) {\n            user_id = teacherUserIdInput.value;\n        }\n    }\n    selectBox.init('#search', 'earlyalert_get_users', \"Select a user\");\n    selectCourseBox.init('#course-search', 'earlyalert_get_courses', user_id, \"Select a course\");\n    let search = document.getElementById('search');\n    let courseSearch = document.getElementById('course-search');\n    let userId = search ? search.value : user_id; // fallback to logged-in user\n\n    // On course change, reload page with user_id and course_id\n    courseSearch.addEventListener('change', function (event) {\n        const courseId = courseSearch.value;\n        if (courseId) {\n            window.location.href = config.wwwroot + '/local/earlyalert/dashboard.php?user_id=' + user_id + '&course_id=' + courseId;\n        }\n    });\n    // If a user is already selected, populate courses for that user\n    if (search && courseSearch) {\n        // On user change, update courses and clear selection\n        search.addEventListener('change', function (event) {\n            const newUserId = search.value;\n            selectCourseBox.init('#course-search', 'earlyalert_get_courses', newUserId, \"Select a course\");\n            // Clear the course selection\n            courseSearch.value = '';\n        });\n    }\n\n    // Set the selected value on courseSearch if course_id is present in URL\n    const course_id = params.get('course_id');\n    if (course_id && courseSearch) {\n        // Wait for the dropdown to be populated, then set the value\n        const setSelectedCourse = () => {\n            if (courseSearch.options.length > 1) {\n                courseSearch.value = course_id;\n            } else {\n                setTimeout(setSelectedCourse, 50);\n            }\n        };\n        setSelectedCourse();\n    }\n}\n\nfunction addUserInfo(emailText, params) {\n    // Define text replacements\n    const textReplace = [\n        '[firstname]',\n        '[fullname]',\n        '[usergrade]',\n        '[grade]',\n        '[coursetitle]',\n        '[assignmenttitle]',\n        '[custommessage]'\n    ];\n\n    // Build replacement info\n    let uniqueMatches = {};\n    for (let i = 0; i < textReplace.length; i++) {\n        if (emailText.includes(textReplace[i])) {\n            // Perform action for each unique match found\n            switch (i) {\n                case 0:\n                    // firstname action\n                    let firstNameText = params.studentname[1] ? params.studentname[1] : '{USER_NOT_FOUND}';\n                    uniqueMatches[i] = firstNameText;\n                    break;\n                case 1:\n                    // fullname action\n                    let targetUser = params.studentname[1] ? `${params.studentname[1]} ${params.studentname[0]}` : '{USER_NOT_FOUND}';\n                    uniqueMatches[i] = targetUser;\n                    break;\n                case 2:\n                    // usergrade action\n                    let userGradeText = params.assignmentgrade || '{USER GRADE NOT PROVIDED/FOUND}';\n                    uniqueMatches[i] = userGradeText;\n                    break;\n                case 3:\n                    // grade acton\n                    let defaultGradeText = params.customgrade || (params.defaultgrade ? params.defaultgrade : '{GRADE NOT PROVIDED/FOUND}');\n                    uniqueMatches[i] = defaultGradeText;\n                    break;\n                case 4:\n                    // coursetitle action\n                    let courseTitleText = params.coursename || '{COURSE TITLE NOT FOUND}';\n                    uniqueMatches[i] = courseTitleText;\n                    break;\n                case 5:\n                    // assignmenttitle action\n                    let assignmentTitleText = params.assignmenttitle || '{ASSIGNMENT TITLE NOT FOUND}';\n                    uniqueMatches[i] = assignmentTitleText;\n                    break;\n                case 6:\n                    // custommessage action\n                    let customMessageText = params.custommessage || '';\n                    uniqueMatches[i] = customMessageText;\n                    break;\n            }\n        }\n    }\n    // Replace the text with the matched values\n    for (let i = 0; i < textReplace.length; i++) {\n        if (uniqueMatches[i]) {\n            emailText = emailText.replace(textReplace[i], uniqueMatches[i]);\n        }\n    }\n    return emailText;\n}\n\n"],"names":["setup_custom_message_listener","customMessageTextareas","document","querySelectorAll","customMessagePreviews","length","console","log","forEach","textarea","index","offsetParent","newTextarea","cloneNode","parentNode","replaceChild","closestContainer","closest","previewElement","querySelector","addEventListener","message","value","trim","textContent","substring","window","currentTemplateCache","set","alert_type","getElementById","templateCache","cachedArrayElement","course_name","JSON","parse","customMessage","i","finalCache","Map","currentCache","key","build_template_cache","assignmentTitle","setup_preview_emails_with_titles","setup_preview_buttons","event","Event","dispatchEvent","filter_students_by_grade_select","grade_select","course_id","teacher_user_id","e","grade_letter_id","target","setup_filter_students_by_grade","filter_students_by_assignment","assignment_input","title","assignmentPreview","validateAssignmentTitle","evt","assignment_title","selected_students","parseInt","render","then","html","js","innerHTML","runTemplateJS","catch","error","get_grades_and_templates","ajax","call","methodname","args","Promise","all","_ref","grades_response","templates_response","num_students","num_rows","Math","min","ceil","num_cols","display_data","student_rows","templates","r","students","row","col","result","includes","lang","idnumber","course_lang","push","campus","campus_lang","faculty","campus_fac_lang","major","campus_fac_maj_lang","courseid","stringify","grade","assign","exam","fullname","check_allnone_listener","cachedArray","templateKey","finalMessage","subject","templateid","revision_id","instructor_id","triggered_from_user_id","has","check_all_none_checkbox","student_ids_selected","checkbox","checked","getAttribute","filter","item","errorElement","sendButtons","previewButtons","style","display","button","disabled","classList","remove","add","custom_message","get","student_template_cache_array","clone","record_data","assigngrade","selected_grade","selected_grade_value","options","selectedIndex","text","templateObj","student_lname_fname","nextElementSibling","firstChild","student_name_arr","student_name","data","split","me","student_id","student_idnumber","studentCampusAttr","studentFacultyAttr","studentMajorAttr","studentLangAttr","courseTemplateKey","campusTemplateKey","facTemplateKey","deptTemplateKey","templateEmailContent","templateEmailSubject","params","studentname","assignmentgrade","assignmenttitle","coursename","customgrade","defaultgrade","custommessage","changedTemplateEmailContent","addUserInfo","replace","template_id","target_user_id","assignment_name","actual_grade","trigger_grade","setup_preview_buttons_from_template","setup_send_emails","contains","URLSearchParams","location","search","user_id","teacherUserIdInput","init","courseSearch","courseId","href","config","wwwroot","newUserId","setSelectedCourse","setTimeout","get_users","student_template_data","create","type","ModalFactory","types","CANCEL","body","Templates","name","template_name","instructor_name","large","done","modal","show","send_button","send_button2","maintain_student_template_data_for_submit","check_individual_students_checkboxes_for_submit","student_ids_array","new_student_temp_array","student","send_string","send_dialog_text","send","cancel","could_not_send_email","confirm","sendEmail","template_data","alert","fail","create_notification_dialog","emailText","textReplace","uniqueMatches","firstNameText","targetUser","userGradeText","defaultGradeText","courseTitleText","assignmentTitleText","customMessageText"],"mappings":"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"}