{"version":3,"file":"filter_students_grade.min.js","sources":["../src/filter_students_grade.js"],"sourcesContent":["import ajax from 'core/ajax';\nimport Templates from 'core/templates';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport {get_string as getString} from 'core/str';\nimport notification from 'core/notification';\nimport {get_format as formatString} from 'core/str';\nimport selectBox from 'local_earlyalert/select_box';\nimport config from 'core/config';\nimport selectCourseBox from 'local_earlyalert/select_course_box';\n\nexport const init = () => {\n    alert_type_button();\n    get_users();\n    // Set up the custom message listener globally - not tied to any specific alert type\n    setup_custom_message_listener();\n    // Set up toggle functionality for custom message containers\n    setup_custom_message_toggles();\n};\n\n/**\n * Sets up event listeners for the custom message textarea\n * Updates the preview text and refreshes templates when the custom message changes\n */\nfunction setup_custom_message_listener() {\n    // Single shared textarea for all alert types\n    const textarea = document.getElementById('early-alert-custom-message');\n    const preview = document.querySelector('.custom-message-preview');\n\n    if (!textarea || !preview) {\n        console.log('No custom message textarea or preview found');\n        return;\n    }\n\n    // Clear previous listeners by cloning\n    const new_textarea = textarea.cloneNode(true);\n    textarea.parentNode.replaceChild(new_textarea, textarea);\n\n    const updatePreview = () => {\n        const message = (new_textarea.value || '').trim();\n        if (window.currentTemplateCache) {\n            window.currentTemplateCache.set('custom_message', message);\n        }\n    };\n\n    new_textarea.addEventListener('input', updatePreview);\n    new_textarea.addEventListener('blur', () => {\n        // Rebuild cache and refresh previews on blur\n        const templateCache = build_template_cache();\n        const alert_type_el = document.getElementById('early-alert-alert-type');\n        const alert_type = alert_type_el ? alert_type_el.value : '';\n        if (alert_type === 'assign') {\n            const at = document.getElementById('early-alert-assignment-title');\n            const assignmentTitle = at ? (at.value || '') : '';\n            templateCache.set('assignment_title', assignmentTitle);\n            setup_preview_emails_with_titles(templateCache);\n        } else {\n            setup_preview_buttons(templateCache);\n        }\n    });\n}\n\n// Helper function to rebuild the template cache\nfunction build_template_cache() {\n    const template_cache_input_el = document.getElementById('early-alert-template-cache');\n    const cached_array = template_cache_input_el ? JSON.parse(template_cache_input_el.value) : [];\n    const course_name = document.getElementById('early_alert_course_name').value;\n    // Single unified textarea\n    const textarea_el = document.getElementById('early-alert-custom-message');\n    const custom_message = textarea_el ? textarea_el.value.trim() : '';\n\n    // Build new cache\n    const final_cache = new Map();\n    final_cache.set('course_name', course_name);\n    final_cache.set('custom_message', custom_message);\n\n    // Preserve existing template entries\n    const current_cache = window.currentTemplateCache || {};\n    if (current_cache && typeof current_cache.forEach === 'function') {\n        current_cache.forEach((value, key) => {\n            if (key !== 'course_name' && key !== 'custom_message' && key !== 'assignment_title') {\n                final_cache.set(key, value);\n            }\n        });\n    }\n\n    window.currentTemplateCache = final_cache;\n    return final_cache;\n}\n\nfunction alert_type_button() {\n    // Get data-link when .early-alert-type-button link is clicked\n    document.addEventListener('click', function (event) {\n        if (event.target.classList.contains('early-alert-type-button')) {\n            let alert_type = event.target.getAttribute('data-link');\n            let course_name = event.target.getAttribute('data-name');\n            let course_id = event.target.getAttribute('data-course_id');\n            let teacher_user_id = document.getElementById('early-alert-teacher-user-id').value;\n            // Choose default grade letter dynamically: 9 for grade alerts, -1 for others (no grade filter)\n            const default_grade_letter_id = (alert_type === 'grade') ? 9 : -1;\n            setup_filter_students_by_grade(course_id, default_grade_letter_id, course_name, alert_type, teacher_user_id);\n        }\n    });\n}\n\n\n/**\n * Adds students with grades\n */\n\nfunction filter_students_by_grade_select() {\n    // Get the selected grade value from the dropdown\n    const grade_select = document.getElementById('id_early_alert_filter_grade_select') || {};\n    const not_using_gradebook_checkbox = document.getElementById('early-alert-not-using-gradebook-checkbox');\n    const course_id = document.getElementById('early_alert_filter_course_id').value;\n    const course_name = document.getElementById('early_alert_course_name').value;\n    const alert_type = document.getElementById('early-alert-alert-type').value;\n    const teacher_user_id = document.getElementById('early-alert-teacher-user-id').value;\n\n    // Setup listener for drop down selection\n    grade_select.addEventListener('change', function (e) {\n        let grade_letter_id = e.target.value;\n        // Check if \"Not using Gradebook\" is checked\n        if (not_using_gradebook_checkbox && not_using_gradebook_checkbox.checked) {\n            // Rebuild template cache with new grade for template parameters\n            const templateCache = build_template_cache();\n            setup_preview_buttons(templateCache);\n        } else {\n            setup_filter_students_by_grade(course_id, grade_letter_id, course_name, alert_type, teacher_user_id);\n        }\n    });\n\n    // Setup listener for \"Not using Gradebook\" checkbox\n    if (not_using_gradebook_checkbox) {\n        not_using_gradebook_checkbox.addEventListener('change', function(e) {\n            const current_grade = grade_select.value; //get current grade selection at time of checkbox change\n            if (e.target.checked) {\n                // Show all students regardless of grade selection, but preserve dropdown value\n                setup_filter_students_by_grade(course_id, -1, course_name, alert_type, teacher_user_id);\n            } else {\n                setup_filter_students_by_grade(course_id, current_grade, course_name, alert_type, teacher_user_id);\n            }\n        });\n    }\n}\n\nfunction filter_students_by_assignment() {\n    // Get the selected grade value from the dropdown\n    const grade_select = document.getElementById('id_early_alert_filter_grade_select') || {};\n    const course_id = document.getElementById('early_alert_filter_course_id').value;\n    const course_name = document.getElementById('early_alert_course_name').value;\n    const alert_type = document.getElementById('early-alert-alert-type').value;\n    const teacher_user_id = document.getElementById('early-alert-teacher-user-id').value;\n\n    // Setup listener for assignment title input\n    const assignment_input = document.getElementById('early-alert-assignment-title');\n\n    // Add an input event listener for real-time preview of the assignment title\n    assignment_input.addEventListener('input', function() {\n        const title = assignment_input.value.trim();\n        // Validate the assignment title\n        validateAssignmentTitle(title);\n    });\n\n    // Only update the full preview on focus out to reduce processing\n    assignment_input.addEventListener('focusout', function(evt) {\n        var assignment_title = assignment_input.value.trim();\n\n        // Validate the assignment title\n        if (validateAssignmentTitle(assignment_title)) {\n            // For assignment alerts, do not filter by grade; pass -1 to include all students\n            setup_filter_students_by_grade(course_id, -1, course_name, alert_type, teacher_user_id, assignment_title);\n        }\n    });\n    validateAssignmentTitle(assignment_input.value.trim());\n}\n\n/**\n * Fetches the student list based on the course_id and grade_letter_id\n * @param course_id\n * @param grade_letter_id\n * @param course_name\n * @param alert_type\n */\nfunction setup_filter_students_by_grade(course_id, grade_letter_id, course_name, alert_type, teacher_user_id, assignment_title = \"\") {\n    let selected_students = [];\n    // convert course_id into an integer\n    course_id = parseInt(course_id);\n    grade_letter_id = parseInt(grade_letter_id);\n    // Add course_id to element with id early_alert_filter_course_id\n    document.getElementById('early_alert_filter_course_id').value = course_id;\n    // Add alert type to element with id early-alert-alert-type\n    document.getElementById('early-alert-alert-type').value = alert_type;\n    // Add course name to element with id early_alert_course_name\n    document.getElementById('early_alert_course_name').value = course_name;\n\n    // Only display if course_id is greater than 0\n    if (course_id > 0) {\n        Templates.render('local_earlyalert/loader', {})\n            .then(function (html, js) {\n                // Insert the rendered template into the target element\n                document.getElementById('early-alert-student-results').innerHTML = html;\n                Templates.runTemplateJS(js);\n            })\n            .catch(function (error) {\n                console.error('Failed to render template:', error);\n            });\n\n        var finalCache = new Map();\n\n        // Fetch student list and templates\n        var get_grades_and_templates = ajax.call([\n            {methodname: 'earlyalert_course_grades_percent_get', args: {\"id\": course_id, \"grade_letter_id\": grade_letter_id, \"teacher_user_id\": teacher_user_id}},\n            {methodname: 'earlyalert_course_student_templates', args: {\"teacher_user_id\": teacher_user_id, \"id\": course_id, \"alert_type\": alert_type}}\n        ]);\n        Promise.all(get_grades_and_templates)\n            .then(([grades_response, templates_response]) => {\n                 //console.log('grade response1: ' , grades_response);\n                // console.log('template response1: ' , templates_response);\n                // Reformat the data to display in a grid\n                let num_students = grades_response.length;\n                // console.log('Number of students returned: ' + num_students);\n                // Calculate the number of rows and columns for the grid\n                let num_rows = Math.min(3, Math.ceil(num_students / 3));\n                let num_cols = Math.ceil(num_students / num_rows);\n                let display_data = {\n                    num_rows: num_rows,\n                    num_cols: num_cols,\n                    student_rows: []\n                };\n\n                let templates = [];\n\n                // Initialize rows array\n                for (let r = 0; r < num_rows; r++) {\n                    display_data.student_rows[r] = {students: []};\n                }\n\n                let row = 0;\n                let col = 0;\n\n                grades_response.forEach(result => {\n                    // Generating keys for templates with course_id, lang, and idnumber - each template is pulled/created for a student based on their campus/lang/facutly/major\n                    if (typeof result === 'object') {\n                        if (!templates.includes('course_' + course_id + '_' + result.lang + '_' + result.idnumber)) {\n                            var course_lang = 'course_' + course_id + '_' + result.lang + '_' + result.idnumber;\n                            templates.push(course_lang);\n                        }\n\n                        if (!templates.includes(result.campus + '_' + result.lang + '_' + result.idnumber)) {\n                            var campus_lang = result.campus + '_' + result.lang + '_' + result.idnumber;\n                            templates.push(campus_lang);\n                        }\n\n                        if (!templates.includes(result.campus + \"_\" + result.faculty + '_' + result.lang + '_' + result.idnumber)) {\n                            var campus_fac_lang = result.campus + \"_\" + result.faculty + '_' + result.lang + '_' + result.idnumber;\n                            templates.push(campus_fac_lang);\n                        }\n\n                        if (!templates.includes(result.campus + \"_\" + result.faculty + \"_\" + result.major + '_' + result.lang + '_' + result.idnumber)) {\n                            var campus_fac_maj_lang = result.campus + \"_\" + result.faculty + \"_\" + result.major + '_' + result.lang + '_' + result.idnumber;\n                            templates.push(campus_fac_maj_lang);\n                        }\n\n                        // Add new template key for campus_course\n                        if (!templates.includes(result.campus + '_course_' + course_id + '_' + result.lang + '_' + result.idnumber)) {\n                            var campus_course_lang = result.campus + '_course_' + course_id + '_' + result.lang + '_' + result.idnumber;\n                            templates.push(campus_course_lang);\n                        }\n\n                        result.faculty = result.faculty ? result.faculty : '';\n                        result.major = result.major ? result.major : '';\n                        result.campus = result.campus ? result.campus : '';\n                        result.courseid = course_id;\n                        display_data.student_rows[row].students[col] = result;\n                        col++;\n                        if (col === num_cols) {\n                            col = 0;\n                            row++;\n                        }\n                    }\n                });\n\n                display_data.templates = JSON.stringify(templates);\n                // console.log( templates_response);\n\n                // Set hascustommessage to true if any template has it enabled\n                let hascustommessage = 0;\n                if (Array.isArray(templates_response) && templates_response.length > 0) {\n                    hascustommessage = templates_response.some(\n                        t => t && t.hascustommessage === 1\n                    ) ? 1 : 0;\n                }\n                display_data.hascustommessage = hascustommessage;\n\n                if (alert_type === 'grade') {\n                    // Add alert_type to display_data\n                    display_data.alert_type = 'Low Grade';\n                    display_data.grade = true;\n                }\n\n                if (alert_type === 'assign') {\n                    // Add alert_type to display_data\n                    display_data.alert_type = 'Missed Assignment';\n                    display_data.assign = true;\n                }\n\n                if (alert_type === 'exam') {\n                    // Add alert_type to display_data\n                    display_data.alert_type = 'Missed Exam';\n                    display_data.exam = true;\n                }\n\n                display_data.fullname = course_name;\n                // Render the template with display_data\n                Templates.render('local_earlyalert/course_student_list', display_data)\n                    .then(function (html, js) {\n                        // Insert the rendered template into the target element\n                        document.getElementById('early-alert-student-results').innerHTML = html;\n                        Templates.runTemplateJS(js);\n\n                        // Focus on the checkbox when student list is being rendered\n                        focusOnCheckall();\n\n                        // (Re)attach custom message listeners and toggles now that the DOM was re-rendered\n                        setup_custom_message_listener();\n                        setup_custom_message_toggles();\n                        // set default grade letter selected\n                        if (alert_type === 'grade') {\n                            let grade_select = document.getElementById('id_early_alert_filter_grade_select') || {};\n                            const not_using_gradebook_checkbox = document.getElementById('early-alert-not-using-gradebook-checkbox');\n\n                            // If showing all students (grade_letter_id === -1)\n                            if (grade_letter_id === -1) {\n                                // Store current value before any changes\n                                const currentValue = grade_select.value;\n                                if (not_using_gradebook_checkbox) {\n                                    not_using_gradebook_checkbox.checked = true;\n                                }\n                                // Restore the previous selection, or default to 9 if none exists\n                               // grade_select.value = currentValue && currentValue !== '-1' ? currentValue : 9;\n                                grade_select.value = 9; // default to 9 when showing all students\n                            } else if (grade_letter_id > 0) {\n                                // Normal grade filtering - set dropdown value and uncheck checkbox\n                                grade_select.value = grade_letter_id;\n                                if (not_using_gradebook_checkbox) {\n                                    not_using_gradebook_checkbox.checked = false;\n                                }\n                            }\n\n                            // Setup listener for filtering students by grade drop down\n                            filter_students_by_grade_select();\n                        }\n                        if (alert_type === 'assign') {\n                            document.getElementById('early-alert-assignment-title').value = assignment_title;\n                            // Setup assignment field validation and event handlers\n                            filter_students_by_assignment();\n                        }\n\n                        check_allnone_listener(selected_students);\n                        const cachedArrayElement = document.getElementById('early-alert-template-cache');\n                        const cachedArray = JSON.parse(cachedArrayElement.value);\n\n                        templates_response.forEach(result => {\n                            if (typeof result === 'object') {\n                                if (cachedArray.includes(result.templateKey)) {\n                                    let finalMessage = {\n                                        subject: result.subject,\n                                        message: result.message,\n                                        templateid: result.templateid,\n                                        revision_id: result.revision_id,\n                                        course_id: result.course_id,\n                                        instructor_id: result.instructor_id,\n                                        triggered_from_user_id: result.triggered_from_user_id,\n                                    };\n                                    finalCache.set(result.templateKey, finalMessage);\n                                }\n                            }\n                        });\n                        finalCache.set('course_name', course_name);\n                        // Ensure custom_message key exists even before user types so downstream lookups never get undefined\n                        if (!finalCache.has('custom_message')) {\n                            finalCache.set('custom_message', '');\n                        }\n\n                        // Store the cache globally so we can access it later when the custom message changes\n                        window.currentTemplateCache = finalCache;\n\n                        // case where assignment titles are taken from user input\n                        if (alert_type === 'assign') // we have to setup the assignment title before previewing!\n                        {\n                            finalCache.set('assignment_title', assignment_title);\n                            if (assignment_title) { // there is a case where previews were setup without titles then dont create modals\n                                setup_preview_emails_with_titles(finalCache); // call back function\n                            }\n\n                        } else { // for other alert types\n                            // built templates with template keys sent to setup previews\n                            setup_preview_buttons(finalCache);\n                        }\n                    })\n                    .catch(function (error) {\n                        console.error('Failed to render template:', error);\n                    });\n            });\n    }\n}\n\nfunction check_all_student_grades(selected_students) {\n    const student_ids_selected = document.getElementById(\"early-alert-student-ids\") || {};\n    student_ids_selected.value = [];\n    const check_all_none_checkbox = document.getElementById('early-alert-checkall-student-checkbox');\n    check_all_none_checkbox.checked = true;\n    //check box for grade showing - remove later\n    const student_checkboxes = document.querySelectorAll(\"input[class^='early-alert-student-checkbox']\");\n    // check box for grade showing - remove later\n    student_checkboxes.forEach(function (checkbox) {\n        checkbox.checked = true;\n        selected_students.push(checkbox.getAttribute('data-student-id'));\n    });\n    student_ids_selected.value = JSON.stringify(selected_students);\n}\n\n// function to save to hidden field on submit if anyone unchecks student records\nfunction check_individual_students_checkboxes_for_submit() {\n    let selected_students = [];\n    const student_ids_selected = document.getElementById(\"early-alert-student-ids\") || {};\n    const student_checkboxes = document.querySelectorAll(\"input[class^='early-alert-student-checkbox']\");\n    student_checkboxes.forEach(function (checkbox) {\n        if (checkbox.checked) {\n            selected_students.push(checkbox.getAttribute('data-student-id'));\n        }\n    });\n    student_ids_selected.value = JSON.stringify(selected_students);\n}\n\nfunction check_allnone_listener(selected_students) {\n    // Add an event listener to the select all checkbox\n    const check_all_none_checkbox = document.getElementById('early-alert-checkall-student-checkbox');\n    const student_ids_selected = document.getElementById(\"early-alert-student-ids\") || {};\n\n    check_all_none_checkbox.addEventListener('click', function () {\n        student_ids_selected.value = [];\n        // Get all checkboxes within the list\n        let checkboxes = document.querySelectorAll(\"input[class^='early-alert-student-checkbox']\");\n        // Loop through each checkbox and toggle its selection based on the state of the select all checkbox\n        checkboxes.forEach(function (checkbox) {\n            if (check_all_none_checkbox.checked) {\n                checkbox.checked = true;\n                selected_students.push(checkbox.getAttribute('data-student-id'));\n            } else {\n                checkbox.checked = false;\n                selected_students = selected_students.filter(item => item !== checkbox.getAttribute('data-student-id'));\n            }\n        });\n        student_ids_selected.value = JSON.stringify(selected_students);\n    });\n}\n\n/**\n * Validates the assignment title and updates UI accordingly\n * @param {string} title - The assignment title to validate\n * @returns {boolean} - Whether the title is valid\n */\nfunction validateAssignmentTitle(title) {\n    const errorElement = document.getElementById('assignment-title-error');\n    const sendButtons = document.querySelectorAll('.early-alert-send-button');\n    const previewButtons = document.querySelectorAll('.early-alert-preview-button');\n\n    if (!title) {\n        // Title is required - show error and disable buttons\n        if (errorElement) {\n            errorElement.style.display = 'block';\n        }\n\n        // Disable send and preview buttons\n        sendButtons.forEach(button => {\n            button.disabled = true;\n            button.title = 'Assignment title is required';\n        });\n\n        previewButtons.forEach(button => {\n            button.disabled = true;\n            button.classList.add('disabled');\n            button.title = 'Assignment title is required';\n        });\n\n        return false;\n    } else {\n        // Title is valid - hide error and enable buttons\n        if (errorElement) {\n            errorElement.style.display = 'none';\n        }\n\n        // Enable send and preview buttons\n        sendButtons.forEach(button => {\n            button.disabled = false;\n            button.title = '';\n        });\n\n        previewButtons.forEach(button => {\n            button.disabled = false;\n            button.classList.remove('disabled');\n            button.title = '';\n        });\n\n        return true;\n    }\n}\n\nfunction setup_preview_buttons(templateCache) {\n    // Get the early-alert-alert-type value\n    const alert_type = document.getElementById('early-alert-alert-type').value;\n\n    // Get the custom message from the template cache\n    const custom_message = templateCache.get('custom_message') || '';\n\n    // Store ALL the student data and template cache etc when its processed\n    let student_template_cache_array = [];\n\n    // Remove any existing click event listeners from preview buttons first\n    const preview_buttons = document.querySelectorAll(\".early-alert-preview-button\");\n    preview_buttons.forEach(button => {\n        const clone = button.cloneNode(true);\n        button.parentNode.replaceChild(clone, button);\n    });\n\n    // Now add new event listeners\n    const fresh_buttons = document.querySelectorAll(\".early-alert-preview-button\");\n    fresh_buttons.forEach(function (button) {\n        let record_data = {};\n        const checkbox = button.closest('tr').querySelector('.early-alert-student-checkbox');\n        const gradeColumn = button.closest('tr').querySelector('.early-alert-grade-column');\n        const gradeBadge = gradeColumn ? gradeColumn.querySelector('.badge') : null;\n        const assigngrade = gradeBadge ? gradeBadge.innerHTML : 'No Grade';\n        let selected_grade = '';\n        let selected_grade_value = 0;\n        if (alert_type === 'grade') { // we only use grade/select etc in this alert type\n            const grade_select = document.getElementById('id_early_alert_filter_grade_select') || {};\n            selected_grade = grade_select.options[grade_select.selectedIndex].text;\n            selected_grade_value = grade_select.value;\n        }\n\n        let templateObj = {};\n        if (checkbox) {\n            // now, access the parent <tr> element (the table row)\n            const table_row = checkbox.parentNode;\n            // extract the student name from the second <td> element within the table row\n            const student_name_td = table_row.nextElementSibling;\n            // fix and parse the name\n            const student_lname_fname = student_name_td.firstChild;\n            var student_name_arr = [];\n            var student_name = \"\";\n            student_lname_fname.data.split(/\\s*,\\s*/).forEach(function (me) {\n                student_name_arr.push(me);\n            });\n            student_name = student_name_arr[1] + ' ' + student_name_arr[0];\n\n            var student_id = checkbox.getAttribute('data-student-id');\n            var student_idnumber = checkbox.getAttribute('data-student-idnumber');\n            const studentCampusAttr = checkbox.getAttribute('data-student-campus');\n            const studentFacultyAttr = checkbox.getAttribute('data-student-faculty');\n            const studentMajorAttr = checkbox.getAttribute('data-student-major');\n            const studentLangAttr = checkbox.getAttribute('data-student-lang');\n            const courseIdAttr = checkbox.getAttribute('data-courseid');\n            // uses data found in the checkbox element attributes to create a key to find the template\n            var courseTemplateKey = studentFacultyAttr + '_course_' + courseIdAttr + '_' + studentLangAttr + '_' + student_idnumber;\n            var campusTemplateKey = studentCampusAttr + '_' + studentLangAttr + '_' + student_idnumber;\n            var facTemplateKey = studentCampusAttr + '_' + studentFacultyAttr + '_' + studentLangAttr + '_' + student_idnumber;\n            var deptTemplateKey = studentCampusAttr + '_' + studentFacultyAttr + '_' + studentMajorAttr + '_' + studentLangAttr + '_' + student_idnumber;\n            var campusCourseTemplateKey = studentCampusAttr + '_course_' + courseIdAttr + '_' + studentLangAttr + '_' + student_idnumber;\n            var templateEmailContent = '';\n            var templateEmailSubject = '';\n            // For debugging - can be removed later\n            console.log('Generated template keys for student ID ' + student_id + ':');\n            console.log('Course template key: '+ courseTemplateKey);\n            console.log('Campus template key: '+ campusTemplateKey);\n            console.log('faculty template key: '+ facTemplateKey);\n            console.log('Dept template key: '+ deptTemplateKey);\n            console.log('course campus template key: '+ campusCourseTemplateKey);\n\n            // templateCache is checked for the template key and if found the email subject and content are set\n            // The order of checks determines the template precedence.\n            if (templateCache.has(campusCourseTemplateKey)) { // MK SC 1013\n                console.log(\"course campus cache found:\", templateCache.get(campusCourseTemplateKey));\n                templateEmailSubject = templateCache.get(campusCourseTemplateKey).subject;\n                templateEmailContent = templateCache.get(campusCourseTemplateKey).message;\n                templateObj = templateCache.get(campusCourseTemplateKey);\n            }\n            else if (templateCache.has(courseTemplateKey)) { // faculty course template SC 1013\n                console.log(\"faculty course cache found:\", templateCache.get(courseTemplateKey));\n                templateEmailSubject = templateCache.get(courseTemplateKey).subject;\n                templateEmailContent = templateCache.get(courseTemplateKey).message;\n                templateObj = templateCache.get(courseTemplateKey);\n            }\n            else if (templateCache.has(facTemplateKey)) {\n                if (templateCache.has(deptTemplateKey)) {\n                    console.log(\"faculty cache found (dept):\", templateCache.get(deptTemplateKey));\n                    templateEmailSubject = templateCache.get(deptTemplateKey).subject;\n                    templateEmailContent = templateCache.get(deptTemplateKey).message;\n                    templateObj = templateCache.get(deptTemplateKey);\n                } else {\n                    console.log(\"faculty cache found: (fac)\", templateCache.get(facTemplateKey));\n                    templateEmailSubject = templateCache.get(facTemplateKey).subject;\n                    templateEmailContent = templateCache.get(facTemplateKey).message;\n                    templateObj = templateCache.get(facTemplateKey);\n                }\n            }\n            else if (templateCache.has(deptTemplateKey)) {\n                console.log(\"faculty dept cache found:\", templateCache.get(deptTemplateKey));\n                templateEmailSubject = templateCache.get(deptTemplateKey).subject;\n                templateEmailContent = templateCache.get(deptTemplateKey).message;\n                templateObj = templateCache.get(deptTemplateKey);\n            }\n            else if (templateCache.has(campusTemplateKey)) { // CAMPUS only MK\n                console.log(\"campus only cache found:\", templateCache.get(campusTemplateKey));\n                templateEmailSubject = templateCache.get(campusTemplateKey).subject;\n                templateEmailContent = templateCache.get(campusTemplateKey).message;\n                templateObj = templateCache.get(campusTemplateKey);\n            }\n            else {\n                templateEmailSubject = 'Template not found';\n                templateEmailContent = 'Template not found';\n            }\n        }\n\n        var assignment_title = templateCache.get('assignment_title') || '';\n\n        var params = {\n            studentname: student_name_arr,\n            assignmentgrade: assigngrade,\n            assignmenttitle: assignment_title,\n            coursename: templateCache.get('course_name'),\n            customgrade: selected_grade ? selected_grade : 'D+',\n            defaultgrade: \"D+\",\n            custommessage: custom_message\n        };\n\n        // Apply the replacements\n        var changedTemplateEmailContent = addUserInfo(templateEmailContent, params);\n\n        // Double-check that [custommessage] is definitely replaced\n        if (changedTemplateEmailContent.includes('[custommessage]')) {\n            changedTemplateEmailContent = changedTemplateEmailContent.replace('[custommessage]', custom_message || '');\n        }\n\n        // assemble record data for individual buttons which includes student and template data\n        record_data.student_id = student_id;\n        record_data.student_name = student_name;\n        record_data.course_name = templateCache.get('course_name');\n        record_data.templateEmailSubject = templateEmailSubject;\n        record_data.templateEmailContent = changedTemplateEmailContent;\n        record_data.template_id = templateObj.templateid;\n        record_data.revision_id = templateObj.revision_id;\n        record_data.triggered_from_user_id = templateObj.triggered_from_user_id;\n        record_data.target_user_id = student_id;\n        record_data.course_id = templateObj.course_id;\n        record_data.instructor_id = templateObj.instructor_id;\n        record_data.assignment_name = params.assignmenttitle;\n        record_data.actual_grade = assigngrade;\n        record_data.trigger_grade = selected_grade_value;\n        record_data.custom_message = custom_message;\n\n        // case where previews are just added to grade alert type and missed exam etc\n        if (alert_type !== 'assign') {\n            button.addEventListener('click', function () {\n                //console.log('Data sent to template from template cache:', record_data);\n                setup_preview_buttons_from_template(record_data);\n            });\n        }\n        // add record to student_template_cache_array to have data to submit / email\n        student_template_cache_array.push(record_data);\n    });\n\n    // once we have all the data we can setup the emails to submit with the template cache data and student ids BUT we have to manage and select the users if they are checked/unchceked\n    setup_send_emails(student_template_cache_array);\n}\n\nfunction setup_preview_emails_with_titles(templateCache) {\n    // Get the early-alert-alert-type value\n    const alert_type = document.getElementById('early-alert-alert-type').value;\n\n    // Get the custom message from the template cache instead of directly from DOM\n    const customMessage = templateCache.get('custom_message') || '';\n\n    // store ALL the student data and template cache etc when its processed\n    let student_template_cache_array = [];\n\n    // Remove any existing click event listeners from preview buttons first\n    const preview_buttons = document.querySelectorAll(\".early-alert-preview-button\");\n    preview_buttons.forEach(button => {\n        const clone = button.cloneNode(true);\n        button.parentNode.replaceChild(clone, button);\n    });\n\n    // Now add new event listeners\n    const fresh_buttons = document.querySelectorAll(\".early-alert-preview-button\");\n    fresh_buttons.forEach(function (button) {\n        let record_data = {};\n        const checkbox = button.closest('tr').querySelector('.early-alert-student-checkbox');\n        const gradeColumn = button.closest('tr').querySelector('.early-alert-grade-column');\n        const gradeBadge = gradeColumn ? gradeColumn.querySelector('.badge') : null;\n        const assigngrade = gradeBadge ? gradeBadge.innerHTML : 'No Grade';\n        let selected_grade = '';\n        let selected_grade_value = 0;\n        if (alert_type === 'grade') { // we only use grade/select etc in this alert type\n            const grade_select = document.getElementById('id_early_alert_filter_grade_select') || {};\n            selected_grade = grade_select.options[grade_select.selectedIndex].text;\n            selected_grade_value = grade_select.value;\n        }\n\n        let templateObj = {};\n        if (checkbox) {\n            // now, access the parent <tr> element (the table row)\n            const table_row = checkbox.parentNode;\n            // extract the student name from the second <td> element within the table row\n            const student_name_td = table_row.nextElementSibling;\n            // fix and parse the name\n            const student_lname_fname = student_name_td.firstChild;\n            var student_name_arr = [];\n            var student_name = \"\";\n            student_lname_fname.data.split(/\\s*,\\s*/).forEach(function (me) {\n                student_name_arr.push(me);\n            });\n            student_name = student_name_arr[1] + ' ' + student_name_arr[0];\n\n            var student_id = checkbox.getAttribute('data-student-id');\n            var student_idnumber = checkbox.getAttribute('data-student-idnumber');\n            const studentCampusAttr = checkbox.getAttribute('data-student-campus');\n            const studentFacultyAttr = checkbox.getAttribute('data-student-faculty');\n            const studentMajorAttr = checkbox.getAttribute('data-student-major');\n            const studentLangAttr = checkbox.getAttribute('data-student-lang');\n            const courseIdAttr = checkbox.getAttribute('data-courseid');\n            var courseTemplateKey = studentFacultyAttr + '_course_' + courseIdAttr + '_' + studentLangAttr + '_' + student_idnumber;\n            var campusTemplateKey = studentCampusAttr + '_' + studentLangAttr + '_' + student_idnumber;\n            var facTemplateKey = studentCampusAttr + '_' + studentFacultyAttr + '_' + studentLangAttr + '_' + student_idnumber;\n            var deptTemplateKey = studentCampusAttr + '_' + studentFacultyAttr + '_' + studentMajorAttr+ '_' + studentLangAttr + '_' + student_idnumber;\n            var campusCourseTemplateKey = studentCampusAttr + '_course_' + courseIdAttr + '_' + studentLangAttr + '_' + student_idnumber;\n            var templateEmailContent = '';\n            var templateEmailSubject = '';\n\n            // For debugging - can be removed later\n            console.log('Generated template keys for student ID ' + student_id + ':');\n            console.log('Course template key: '+ courseTemplateKey);\n            console.log('Campus template key: '+ campusTemplateKey);\n            console.log('faculty template key: '+ facTemplateKey);\n            console.log('Dept template key: '+ deptTemplateKey);\n            console.log('course campus template key: '+ campusCourseTemplateKey);\n\n         //  Course template ke/courseTemplateKey: SC_course_13_EN_220403044\n            // The order of checks determines the template precedence.\n            // templateCache is checked for the template key and if found the email subject and content are set\n            // The order of checks determines the template precedence.\n            if (templateCache.has(campusCourseTemplateKey)) { // MK SC 1013\n                console.log(\"course campus cache found:\", templateCache.get(campusCourseTemplateKey));\n                templateEmailSubject = templateCache.get(campusCourseTemplateKey).subject;\n                templateEmailContent = templateCache.get(campusCourseTemplateKey).message;\n                templateObj = templateCache.get(campusCourseTemplateKey);\n            }\n            else if (templateCache.has(courseTemplateKey)) { // faculty course template SC 1013\n                console.log(\"faculty course cache found:\", templateCache.get(courseTemplateKey));\n                templateEmailSubject = templateCache.get(courseTemplateKey).subject;\n                templateEmailContent = templateCache.get(courseTemplateKey).message;\n                templateObj = templateCache.get(courseTemplateKey);\n            }\n            else if (templateCache.has(facTemplateKey)) {\n                if (templateCache.has(deptTemplateKey)) {\n                    console.log(\"faculty cache found (dept):\", templateCache.get(deptTemplateKey));\n                    templateEmailSubject = templateCache.get(deptTemplateKey).subject;\n                    templateEmailContent = templateCache.get(deptTemplateKey).message;\n                    templateObj = templateCache.get(deptTemplateKey);\n                } else {\n                    console.log(\"faculty cache found: (fac)\", templateCache.get(facTemplateKey));\n                    templateEmailSubject = templateCache.get(facTemplateKey).subject;\n                    templateEmailContent = templateCache.get(facTemplateKey).message;\n                    templateObj = templateCache.get(facTemplateKey);\n                }\n            }\n            else if (templateCache.has(deptTemplateKey)) {\n                 console.log(\"faculty dept cache found:\", templateCache.get(deptTemplateKey));\n                templateEmailSubject = templateCache.get(deptTemplateKey).subject;\n                templateEmailContent = templateCache.get(deptTemplateKey).message;\n                templateObj = templateCache.get(deptTemplateKey);\n            }\n            else if (templateCache.has(campusTemplateKey)) { // CAMPUS only MK\n                 console.log(\"campus only cache found:\", templateCache.get(campusTemplateKey));\n                templateEmailSubject = templateCache.get(campusTemplateKey).subject;\n                templateEmailContent = templateCache.get(campusTemplateKey).message;\n                templateObj = templateCache.get(campusTemplateKey);\n            }\n            else {\n                templateEmailSubject = 'Template not found';\n                templateEmailContent = 'Template not found';\n            }\n        }\n\n        var assignment_title = templateCache.get('assignment_title') || '';\n\n        var params = {\n            studentname: student_name_arr,\n            assignmentgrade: assigngrade,\n            assignmenttitle: assignment_title,\n            coursename: templateCache.get('course_name'),\n            customgrade: selected_grade ? selected_grade : 'D+',\n            defaultgrade: \"D+\",\n            custommessage: customMessage\n        };\n\n        // Apply the replacements\n        var changedTemplateEmailContent = addUserInfo(templateEmailContent, params);\n\n        // Double-check that [custommessage] is definitely replaced\n        if (changedTemplateEmailContent.includes('[custommessage]')) {\n            changedTemplateEmailContent = changedTemplateEmailContent.replace('[custommessage]', customMessage || '');\n        }\n\n        // assemble record data for individual buttons which includes student and template data\n        record_data.student_id = student_id;\n        record_data.student_name = student_name;\n        record_data.course_name = templateCache.get('course_name');\n        record_data.templateEmailSubject = templateEmailSubject;\n        record_data.templateEmailContent = changedTemplateEmailContent;\n        record_data.template_id = templateObj.templateid;\n        record_data.revision_id = templateObj.revision_id;\n        record_data.triggered_from_user_id = templateObj.triggered_from_user_id;\n        record_data.target_user_id = student_id;\n        record_data.course_id = templateObj.course_id;\n        record_data.instructor_id = templateObj.instructor_id;\n        record_data.assignment_name = params.assignmenttitle;\n        record_data.actual_grade = assigngrade;\n        record_data.trigger_grade = selected_grade_value;\n        record_data.custom_message = customMessage;\n\n        button.addEventListener('click', function () {\n            setup_preview_buttons_from_template(record_data);\n        });\n        student_template_cache_array.push(record_data);\n    });\n\n    setup_send_emails(student_template_cache_array);\n}\n\nvar current_modal = null;\n\nfunction setup_preview_buttons_from_template(student_template_data) {\n    //console.log('Modal created with: ',student_template_data);\n    ModalFactory.create({\n        title: getString('preview_email', 'local_earlyalert'),\n        type: ModalFactory.types.CANCEL,\n        body: Templates.render('local_earlyalert/preview_student_email', {\n            name: student_template_data.template_name,\n            student_name: student_template_data.student_name,\n            subject: student_template_data.templateEmailSubject,\n            message: student_template_data.templateEmailContent,\n            instructor_name: ''\n        }),\n        large: true,\n\n    }).done(modal => {\n        modal.show();\n        current_modal = modal;\n        return current_modal;\n    });\n\n}\n\nfunction setup_send_emails(student_template_cache_array) {\n    const send_button = document.getElementById('early-alert-send-button1');\n    const send_button2 = document.getElementById('early-alert-send-button2');\n\n    // Remove any existing event listeners by cloning the buttons\n    if (send_button) {\n        const new_send_button = send_button.cloneNode(true);\n        send_button.parentNode.replaceChild(new_send_button, send_button);\n        new_send_button.addEventListener('click', function () {\n            // Always rebuild the array based on currently checked students\n            maintain_student_template_data_for_submit(student_template_cache_array, true);\n        });\n    }\n\n    if (send_button2) {\n        const new_send_button2 = send_button2.cloneNode(true);\n        send_button2.parentNode.replaceChild(new_send_button2, send_button2);\n        new_send_button2.addEventListener('click', function () {\n            // Always rebuild the array based on currently checked students\n            maintain_student_template_data_for_submit(student_template_cache_array, true);\n        });\n    }\n}\n\n// Only send for currently checked students, not all in the cache array\nfunction maintain_student_template_data_for_submit(student_template_cache_array, forceRebuild = false) {\n    check_individual_students_checkboxes_for_submit();\n    var student_ids_array = JSON.parse(document.getElementById(\"early-alert-student-ids\").value); // hidden field ids\n\n    // If forceRebuild is true, rebuild the array from DOM state\n    let filtered_array = [];\n    if (forceRebuild) {\n        // Rebuild from DOM: only include checked students\n        const student_checkboxes = document.querySelectorAll(\"input[class^='early-alert-student-checkbox']\");\n        student_checkboxes.forEach(function (checkbox) {\n            if (checkbox.checked) {\n                const student_id = checkbox.getAttribute('data-student-id');\n                // Find the matching record in the cache array\n                const record = student_template_cache_array.find(stu => stu.student_id == student_id);\n                if (record) filtered_array.push(record);\n            }\n        });\n    } else {\n        // remove students from template cache if they have been unchecked\n        filtered_array = student_template_cache_array.filter(student => student_ids_array.includes(student.student_id));\n    }\n\n    filtered_array.length > 0 ? create_notification_dialog(filtered_array) : notification.alert('No students selected', 'Please select at least one student to send emails.');\n}\n\nfunction create_notification_dialog(student_template_cache_array) {\n\n    // Get the data id attribute value\n    var send_string = getString('send_email', 'local_earlyalert');\n    var send_dialog_text = getString('send_dialog_text', 'local_earlyalert');\n    var send = getString('send', 'local_earlyalert');\n    var cancel = getString('cancel', 'local_earlyalert');\n    var could_not_send_email = getString('could_not_send_email', 'local_earlyalert');\n    var sent_dialog_text = getString('sent_dialog_text', 'local_earlyalert');\n\n    // Notification\n    notification.confirm(send_string, send_dialog_text, send, cancel, function () {\n\n        // send emails and save records\n        var sendEmail = ajax.call([{\n            methodname: 'earlyalert_report_log_insert',\n            args: {\n                template_data: JSON.stringify(student_template_cache_array),\n            }\n        }]);\n        sendEmail[0].done(function () {\n            // success\n            sendEmail[0].then(result => {\n                    notification.alert('Email', getString('sent_dialog_text', 'local_earlyalert', result));\n                }\n            );\n        }).fail(function () {\n            notification.alert(could_not_send_email);\n        });\n    });\n}\n\nfunction get_users() {\n    const params = new URLSearchParams(window.location.search);\n    let user_id = params.get('user_id');\n    // If user_id is not in URL, use the hidden input value (logged-in user)\n    if (!user_id) {\n        const teacherUserIdInput = document.getElementById('early-alert-teacher-user-id');\n        if (teacherUserIdInput) {\n            user_id = teacherUserIdInput.value;\n        }\n    }\n    selectBox.init('#search', 'earlyalert_get_users', \"Select a user\");\n    selectCourseBox.init('#course-search', 'earlyalert_get_courses', user_id, \"Select a course\");\n    let search = document.getElementById('search');\n    let courseSearch = document.getElementById('course-search');\n    let userId = search ? search.value : user_id; // fallback to logged-in user\n\n    // On course change, reload page with user_id and course_id\n    courseSearch.addEventListener('change', function (event) {\n        const courseId = courseSearch.value;\n        if (courseId) {\n            window.location.href = config.wwwroot + '/local/earlyalert/dashboard.php?user_id=' + user_id + '&course_id=' + courseId;\n        }\n    });\n    // If a user is already selected, populate courses for that user\n    if (search && courseSearch) {\n        // On user change, update courses and clear selection\n        search.addEventListener('change', function (event) {\n            const newUserId = search.value;\n            selectCourseBox.init('#course-search', 'earlyalert_get_courses', newUserId, \"Select a course\");\n            // Clear the course selection\n            courseSearch.value = '';\n        });\n    }\n\n    // Set the selected value on courseSearch if course_id is present in URL\n    const course_id = params.get('course_id');\n    if (course_id && courseSearch) {\n        // Wait for the dropdown to be populated, then set the value\n        const setSelectedCourse = () => {\n            if (courseSearch.options.length > 1) {\n                courseSearch.value = course_id;\n            } else {\n                setTimeout(setSelectedCourse, 50);\n            }\n        };\n        setSelectedCourse();\n    }\n}\n\nfunction addUserInfo(emailText, params) {\n    // Define text replacements\n    const textReplace = [\n        '[firstname]',\n        '[fullname]',\n        '[usergrade]',\n        '[grade]',\n        '[coursetitle]',\n        '[assignmenttitle]',\n        '[custommessage]'\n    ];\n\n    // Build replacement info\n    let uniqueMatches = {};\n    for (let i = 0; i < textReplace.length; i++) {\n        if (emailText.includes(textReplace[i])) {\n            // Perform action for each unique match found\n            switch (i) {\n                case 0:\n                    // firstname action\n                    let firstNameText = params.studentname[1] ? params.studentname[1] : '{USER_NOT_FOUND}';\n                    uniqueMatches[i] = firstNameText;\n                    break;\n                case 1:\n                    // fullname action\n                    let targetUser = params.studentname[1] ? `${params.studentname[1]} ${params.studentname[0]}` : '{USER_NOT_FOUND}';\n                    uniqueMatches[i] = targetUser;\n                    break;\n                case 2:\n                    // usergrade action\n                    let userGradeText = params.assignmentgrade || '{USER GRADE NOT PROVIDED/FOUND}';\n                    uniqueMatches[i] = userGradeText;\n                    break;\n                case 3:\n                    // grade acton\n                    let defaultGradeText = params.customgrade || (params.defaultgrade ? params.defaultgrade : '{GRADE NOT PROVIDED/FOUND}');\n                    uniqueMatches[i] = defaultGradeText;\n                    break;\n                case 4:\n                    // coursetitle action\n                    let courseTitleText = params.coursename || '{COURSE TITLE NOT FOUND}';\n                    uniqueMatches[i] = courseTitleText;\n                    break;\n                case 5:\n                    // assignmenttitle action\n                    let assignmentTitleText = params.assignmenttitle || '{ASSIGNMENT TITLE NOT FOUND}';\n                    uniqueMatches[i] = assignmentTitleText;\n                    break;\n                case 6:\n                    // custommessage action\n                    let customMessageText = params.custommessage || '';\n                    uniqueMatches[i] = customMessageText;\n                    break;\n            }\n        }\n    }\n    // Replace the text with the matched values\n    for (let i = 0; i < textReplace.length; i++) {\n        if (uniqueMatches[i]) {\n            emailText = emailText.replace(textReplace[i], uniqueMatches[i]);\n        }\n    }\n    return emailText;\n}\n\n/**\n * Focuses on the check all/none checkbox when the student list is rendered\n */\nfunction focusOnCheckall() {\n    // Use setTimeout to ensure DOM is fully rendered\n    setTimeout(() => {\n        // Find the check all/none checkbox\n        const check_all_none_checkbox = document.getElementById('early-alert-checkall-student-checkbox');\n\n        if (check_all_none_checkbox) {\n            // Scroll to the check all checkbox smoothly\n            check_all_none_checkbox.scrollIntoView({\n                behavior: 'smooth',\n                block: 'center'\n            });\n\n            // Focus on the checkbox for keyboard navigation\n            check_all_none_checkbox.focus();\n        }\n    }, 100); // Small delay to ensure DOM is ready\n}\n\n/**\n * Sets up toggle functionality for the single custom message container\n */\nfunction setup_custom_message_toggles() {\n    const btn = document.getElementById('toggle-custom-message');\n    const container = document.getElementById('custom-message-container');\n\n    if (!btn || !container) {\n        return;\n    }\n\n    // Replace button to clear any previous listeners from re-renders\n    const button = btn.cloneNode(true);\n    btn.parentNode.replaceChild(button, btn);\n\n    const setOpenState = (open) => {\n        // Sync aria state\n        button.setAttribute('aria-expanded', String(open));\n        // Update label and styles\n        if (open) {\n            button.innerHTML = '<i class=\"fa fa-minus\"></i> Hide Custom Message';\n            button.classList.remove('btn-outline-secondary');\n            button.classList.add('btn-outline-primary');\n        } else {\n            button.innerHTML = '<i class=\"fa fa-plus\"></i> Show Custom Message';\n            button.classList.remove('btn-outline-primary');\n            button.classList.add('btn-outline-secondary');\n        }\n    };\n\n    // Ensure base collapse class exists\n    if (!container.classList.contains('collapse')) {\n        container.classList.add('collapse');\n    }\n\n    // Initialize UI based on current state\n    setOpenState(container.classList.contains('show'));\n\n    // Handle click without relying on Bootstrap jQuery events\n    button.addEventListener('click', (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        const willOpen = !container.classList.contains('show');\n        container.classList.toggle('show', willOpen);\n        setOpenState(willOpen);\n        if (willOpen) {\n            // Focus textarea when opening\n            setTimeout(() => {\n                const ta = container.querySelector('.early-alert-custom-message');\n                if (ta) ta.focus();\n            }, 0);\n        }\n    });\n\n    // Hover effects\n    button.addEventListener('mouseenter', () => {\n        if (container.classList.contains('show')) {\n            button.classList.add('btn-primary');\n            button.classList.remove('btn-outline-primary');\n        } else {\n            button.classList.add('btn-secondary');\n            button.classList.remove('btn-outline-secondary');\n        }\n    });\n    button.addEventListener('mouseleave', () => {\n        if (container.classList.contains('show')) {\n            button.classList.remove('btn-primary');\n            button.classList.add('btn-outline-primary');\n        } else {\n            button.classList.remove('btn-secondary');\n            button.classList.add('btn-outline-secondary');\n        }\n    });\n}\n"],"names":["setup_custom_message_listener","textarea","document","getElementById","preview","querySelector","console","log","new_textarea","cloneNode","parentNode","replaceChild","addEventListener","message","value","trim","window","currentTemplateCache","set","templateCache","build_template_cache","alert_type_el","at","assignmentTitle","setup_preview_emails_with_titles","setup_preview_buttons","template_cache_input_el","course_name","JSON","parse","textarea_el","custom_message","final_cache","Map","current_cache","forEach","key","filter_students_by_grade_select","grade_select","not_using_gradebook_checkbox","course_id","alert_type","teacher_user_id","e","grade_letter_id","target","checked","setup_filter_students_by_grade","current_grade","filter_students_by_assignment","assignment_input","validateAssignmentTitle","evt","assignment_title","selected_students","parseInt","render","then","html","js","innerHTML","runTemplateJS","catch","error","finalCache","get_grades_and_templates","ajax","call","methodname","args","Promise","all","_ref","grades_response","templates_response","num_students","length","num_rows","Math","min","ceil","num_cols","display_data","student_rows","templates","r","students","row","col","result","includes","lang","idnumber","course_lang","push","campus","campus_lang","faculty","campus_fac_lang","major","campus_fac_maj_lang","campus_course_lang","courseid","stringify","hascustommessage","Array","isArray","some","t","grade","assign","exam","fullname","focusOnCheckall","setup_custom_message_toggles","check_allnone_listener","cachedArrayElement","cachedArray","templateKey","finalMessage","subject","templateid","revision_id","instructor_id","triggered_from_user_id","has","check_individual_students_checkboxes_for_submit","student_ids_selected","querySelectorAll","checkbox","getAttribute","check_all_none_checkbox","filter","item","title","errorElement","sendButtons","previewButtons","style","display","button","disabled","classList","remove","add","get","student_template_cache_array","clone","record_data","closest","gradeColumn","gradeBadge","assigngrade","selected_grade","selected_grade_value","options","selectedIndex","text","templateObj","student_lname_fname","nextElementSibling","firstChild","student_name_arr","student_name","data","split","me","student_id","student_idnumber","studentCampusAttr","studentFacultyAttr","studentMajorAttr","studentLangAttr","courseIdAttr","courseTemplateKey","campusTemplateKey","facTemplateKey","deptTemplateKey","campusCourseTemplateKey","templateEmailContent","templateEmailSubject","params","studentname","assignmentgrade","assignmenttitle","coursename","customgrade","defaultgrade","custommessage","changedTemplateEmailContent","addUserInfo","replace","template_id","target_user_id","assignment_name","actual_grade","trigger_grade","setup_preview_buttons_from_template","setup_send_emails","customMessage","event","contains","URLSearchParams","location","search","user_id","teacherUserIdInput","init","courseSearch","courseId","href","config","wwwroot","newUserId","setSelectedCourse","setTimeout","get_users","student_template_data","create","type","ModalFactory","types","CANCEL","body","Templates","name","template_name","instructor_name","large","done","modal","show","send_button","send_button2","new_send_button","maintain_student_template_data_for_submit","new_send_button2","forceRebuild","student_ids_array","filtered_array","record","find","stu","student","create_notification_dialog","notification","alert","send_string","send_dialog_text","send","cancel","could_not_send_email","confirm","sendEmail","template_data","fail","emailText","textReplace","uniqueMatches","i","firstNameText","targetUser","userGradeText","defaultGradeText","courseTitleText","assignmentTitleText","customMessageText","scrollIntoView","behavior","block","focus","btn","container","setOpenState","open","setAttribute","String","preventDefault","stopPropagation","willOpen","toggle","ta"],"mappings":"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"}