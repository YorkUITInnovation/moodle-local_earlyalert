{"version":3,"file":"filter_students_grade.min.js","sources":["../src/filter_students_grade.js"],"sourcesContent":["import ajax from 'core/ajax';\nimport Templates from 'core/templates';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport {get_string as getString} from 'core/str';\nimport notification from 'core/notification';\nimport {get_format as formatString} from 'core/str';\nimport selectBox from 'local_earlyalert/select_box';\nimport config from 'core/config';\nimport selectCourseBox from 'local_earlyalert/select_course_box';\n\nexport const init = () => {\n    alert_type_button();\n    get_users();\n    // Set up the custom message listener globally - not tied to any specific alert type\n    setup_custom_message_listener();\n    // Set up toggle functionality for custom message containers\n    setup_custom_message_toggles();\n};\n\n/**\n * Sets up event listeners for the custom message textarea\n * Updates the preview text and refreshes templates when the custom message changes\n */\nfunction setup_custom_message_listener() {\n    // Single shared textarea for all alert types\n    const textarea = document.getElementById('early-alert-custom-message');\n    const preview = document.querySelector('.custom-message-preview');\n\n    if (!textarea || !preview) {\n        console.log('No custom message textarea or preview found');\n        return;\n    }\n\n    // Clear previous listeners by cloning\n    const new_textarea = textarea.cloneNode(true);\n    textarea.parentNode.replaceChild(new_textarea, textarea);\n\n    const updatePreview = () => {\n        const message = (new_textarea.value || '').trim();\n        if (window.currentTemplateCache) {\n            window.currentTemplateCache.set('custom_message', message);\n        }\n    };\n\n    new_textarea.addEventListener('input', updatePreview);\n    new_textarea.addEventListener('blur', () => {\n        // Rebuild cache and refresh previews on blur\n        const templateCache = build_template_cache();\n        const alert_type_el = document.getElementById('early-alert-alert-type');\n        const alert_type = alert_type_el ? alert_type_el.value : '';\n        if (alert_type === 'assign') {\n            const at = document.getElementById('early-alert-assignment-title');\n            const assignmentTitle = at ? (at.value || '') : '';\n            templateCache.set('assignment_title', assignmentTitle);\n            setup_preview_emails_with_titles(templateCache);\n        } else {\n            setup_preview_buttons(templateCache);\n        }\n    });\n}\n\n// Helper function to rebuild the template cache\nfunction build_template_cache() {\n    const template_cache_input_el = document.getElementById('early-alert-template-cache');\n    const cached_array = template_cache_input_el ? JSON.parse(template_cache_input_el.value) : [];\n    const course_name = document.getElementById('early_alert_course_name').value;\n\n    // Single unified textarea\n    const textarea_el = document.getElementById('early-alert-custom-message');\n    const custom_message = textarea_el ? textarea_el.value.trim() : '';\n\n    // Build new cache\n    const final_cache = new Map();\n    final_cache.set('course_name', course_name);\n    final_cache.set('custom_message', custom_message);\n\n    // Preserve existing template entries\n    const current_cache = window.currentTemplateCache || {};\n    if (current_cache && typeof current_cache.forEach === 'function') {\n        current_cache.forEach((value, key) => {\n            if (key !== 'course_name' && key !== 'custom_message' && key !== 'assignment_title') {\n                final_cache.set(key, value);\n            }\n        });\n    }\n\n    window.currentTemplateCache = final_cache;\n    return final_cache;\n}\n\nfunction alert_type_button() {\n    // Get data-link when .early-alert-type-button link is clicked\n    document.addEventListener('click', function (event) {\n        if (event.target.classList.contains('early-alert-type-button')) {\n            let alert_type = event.target.getAttribute('data-link');\n            let course_name = event.target.getAttribute('data-name');\n            let course_id = event.target.getAttribute('data-course_id');\n            let teacher_user_id = document.getElementById('early-alert-teacher-user-id').value;\n            // console.log('teacher_user_id:', teacher_user_id);\n            // Get student list based on alert type\n            setup_filter_students_by_grade(course_id, 9, course_name, alert_type, teacher_user_id);\n        }\n    });\n}\n\n\n/**\n * Adds students with grades\n */\n\nfunction filter_students_by_grade_select() {\n\n    // Get the s delected grade value from the dropdown\n    const grade_select = document.getElementById('id_early_alert_filter_grade_select') || {};\n    const course_id = document.getElementById('early_alert_filter_course_id').value;\n    const course_name = document.getElementById('early_alert_course_name').value;\n    const alert_type = document.getElementById('early-alert-alert-type').value;\n    const teacher_user_id = document.getElementById('early-alert-teacher-user-id').value;\n    // setup listener for drop down selection\n    grade_select.addEventListener('change', function (e) {\n        let grade_letter_id = e.target.value;\n        setup_filter_students_by_grade(course_id, grade_letter_id, course_name, alert_type, teacher_user_id);\n\n    });\n}\n\nfunction filter_students_by_assignment() {\n    // Get the selected grade value from the dropdown\n    const grade_select = document.getElementById('id_early_alert_filter_grade_select') || {};\n    const course_id = document.getElementById('early_alert_filter_course_id').value;\n    const course_name = document.getElementById('early_alert_course_name').value;\n    const alert_type = document.getElementById('early-alert-alert-type').value;\n    const teacher_user_id = document.getElementById('early-alert-teacher-user-id').value;\n\n    // Setup listener for assignment title input\n    const assignment_input = document.getElementById('early-alert-assignment-title');\n\n    // Add an input event listener for real-time preview of the assignment title\n    assignment_input.addEventListener('input', function() {\n        const title = assignment_input.value.trim();\n        const assignmentPreview = document.getElementById('assignment-title-preview');\n        if (assignmentPreview) {\n            assignmentPreview.textContent = title ? `: \"${title.substring(0, 50)}${title.length > 50 ? '...' : ''}\"` : '';\n        }\n\n        // Validate the assignment title\n        validateAssignmentTitle(title);\n    });\n\n    // Only update the full preview on focus out to reduce processing\n    assignment_input.addEventListener('focusout', function(evt) {\n        var assignment_title = assignment_input.value.trim();\n\n        // Validate the assignment title\n        if (validateAssignmentTitle(assignment_title)) {\n            setup_filter_students_by_grade(course_id, '9', course_name, alert_type, teacher_user_id, assignment_title);\n        }\n    });\n    validateAssignmentTitle(assignment_input.value.trim());\n}\n\n/**\n * Fetches the student list based on the course_id and grade_letter_id\n * @param course_id\n * @param grade_letter_id\n * @param course_name\n * @param alert_type\n */\nfunction setup_filter_students_by_grade(course_id, grade_letter_id, course_name, alert_type, teacher_user_id, assignment_title = \"\") {\n    let selected_students = [];\n    // convert course_id into an integer\n    course_id = parseInt(course_id);\n    grade_letter_id = parseInt(grade_letter_id);\n    // Add course_id to element with id early_alert_filter_course_id\n    document.getElementById('early_alert_filter_course_id').value = course_id;\n    // Add alert type to element with id early-alert-alert-type\n    document.getElementById('early-alert-alert-type').value = alert_type;\n    // Add course name to element with id early_alert_course_name\n    document.getElementById('early_alert_course_name').value = course_name;\n\n    // Only display if course_id is greater than 0\n    if (course_id > 0) {\n        //Show loader\n        Templates.render('local_earlyalert/loader', {})\n            .then(function (html, js) {\n                // Insert the rendered template into the target element\n                document.getElementById('early-alert-student-results').innerHTML = html;\n                Templates.runTemplateJS(js);\n            })\n            .catch(function (error) {\n                console.error('Failed to render template:', error);\n            });\n\n        var finalCache = new Map();\n\n        // Fetch student list and templates\n        var get_grades_and_templates = ajax.call([\n            {methodname: 'earlyalert_course_grades_percent_get', args: {\"id\": course_id, \"grade_letter_id\": grade_letter_id, \"teacher_user_id\": teacher_user_id}},\n            {methodname: 'earlyalert_course_student_templates', args: {\"teacher_user_id\": teacher_user_id, \"id\": course_id, \"alert_type\": alert_type}}\n        ]);\n        Promise.all(get_grades_and_templates)\n            .then(([grades_response, templates_response]) => {\n                // console.log('grade response1: ' , grades_response);\n                // console.log('template response1: ' , templates_response);\n                // Reformat the data to display in a grid\n                let num_students = grades_response.length;\n                // console.log('Number of students returned: ' + num_students);\n                // Calculate the number of rows and columns for the grid\n                let num_rows = Math.min(3, Math.ceil(num_students / 3));\n                let num_cols = Math.ceil(num_students / num_rows);\n                let display_data = {\n                    num_rows: num_rows,\n                    num_cols: num_cols,\n                    student_rows: []\n                };\n\n                let templates = [];\n\n                // Initialize rows array\n                for (let r = 0; r < num_rows; r++) {\n                    display_data.student_rows[r] = {students: []};\n                }\n\n                let row = 0;\n                let col = 0;\n\n                grades_response.forEach(result => {\n                    // Generating keys for templates with course_id, lang, and idnumber - each template is pulled/created for a student based on their campus/lang/facutly/major\n                    if (typeof result === 'object') {\n                        if (!templates.includes('course_' + course_id + '_' + result.lang + '_' + result.idnumber)) {\n                            var course_lang = 'course_' + course_id + '_' + result.lang + '_' + result.idnumber;\n                            templates.push(course_lang);\n                        }\n\n                        if (!templates.includes(result.campus + '_' + result.lang + '_' + result.idnumber)) {\n                            var campus_lang = result.campus + '_' + result.lang + '_' + result.idnumber;\n                            templates.push(campus_lang);\n                        }\n\n                        if (!templates.includes(result.campus + \"_\" + result.faculty + '_' + result.lang + '_' + result.idnumber)) {\n                            var campus_fac_lang = result.campus + \"_\" + result.faculty + '_' + result.lang + '_' + result.idnumber;\n                            templates.push(campus_fac_lang);\n                        }\n\n                        if (!templates.includes(result.campus + \"_\" + result.faculty + \"_\" + result.major + '_' + result.lang + '_' + result.idnumber)) {\n                            var campus_fac_maj_lang = result.campus + \"_\" + result.faculty + \"_\" + result.major + '_' + result.lang + '_' + result.idnumber;\n                            templates.push(campus_fac_maj_lang);\n                        }\n\n                        result.faculty = result.faculty ? result.faculty : '';\n                        result.major = result.major ? result.major : '';\n                        result.campus = result.campus ? result.campus : '';\n                        result.courseid = course_id;\n                        display_data.student_rows[row].students[col] = result;\n                        col++;\n                        if (col === num_cols) {\n                            col = 0;\n                            row++;\n                        }\n                    }\n                });\n\n                display_data.templates = JSON.stringify(templates);\n\n                if (alert_type === 'grade') {\n                    // Add alert_type to display_data\n                    display_data.alert_type = 'Low Grade';\n                    display_data.grade = true;\n                }\n\n                if (alert_type === 'assign') {\n                    // Add alert_type to display_data\n                    display_data.alert_type = 'Missed Assignment';\n                    display_data.assign = true;\n                }\n\n                if (alert_type === 'exam') {\n                    // Add alert_type to display_data\n                    display_data.alert_type = 'Missed Exam';\n                    display_data.exam = true;\n                }\n\n                display_data.fullname = course_name;\n                // Render the template with display_data\n                Templates.render('local_earlyalert/course_student_list', display_data)\n                    .then(function (html, js) {\n                        // Insert the rendered template into the target element\n                        document.getElementById('early-alert-student-results').innerHTML = html;\n                        Templates.runTemplateJS(js);\n\n                        // Focus on the checkbox when student list is being rendered\n                        focusOnCheckall();\n\n                        // (Re)attach custom message listeners and toggles now that the DOM was re-rendered\n                        setup_custom_message_listener();\n                        setup_custom_message_toggles();\n                        // set default grade letter selected\n                        if (alert_type === 'grade') {\n                            let grade_select = document.getElementById('id_early_alert_filter_grade_select') || {};\n                            grade_select.value = grade_letter_id;\n                            // setup listener for filtering students by grade drop down\n                            filter_students_by_grade_select();\n                        }\n                        if (alert_type === 'assign') {\n                            document.getElementById('early-alert-assignment-title').value = assignment_title;\n                            // Setup assignment field validation and event handlers\n                            filter_students_by_assignment();\n                        }\n\n                        check_allnone_listener(selected_students);\n                        const cachedArrayElement = document.getElementById('early-alert-template-cache');\n                        const cachedArray = JSON.parse(cachedArrayElement.value);\n\n                        templates_response.forEach(result => {\n                            if (typeof result === 'object') {\n                                if (cachedArray.includes(result.templateKey)) {\n                                    let finalMessage = {\n                                        subject: result.subject,\n                                        message: result.message,\n                                        templateid: result.templateid,\n                                        revision_id: result.revision_id,\n                                        course_id: result.course_id,\n                                        instructor_id: result.instructor_id,\n                                        triggered_from_user_id: result.triggered_from_user_id,\n                                    };\n                                    finalCache.set(result.templateKey, finalMessage);\n                                }\n                            }\n                        });\n                        finalCache.set('course_name', course_name);\n                        // Ensure custom_message key exists even before user types so downstream lookups never get undefined\n                        if (!finalCache.has('custom_message')) {\n                            finalCache.set('custom_message', '');\n                        }\n\n                        // Store the cache globally so we can access it later when the custom message changes\n                        window.currentTemplateCache = finalCache;\n\n                        // case where assignment titles are taken from user input\n                        if (alert_type === 'assign') // we have to setup the assignment title before previewing!\n                        {\n                            finalCache.set('assignment_title', assignment_title);\n                            if (assignment_title) { // there is a case where previews were setup without titles then dont create modals\n                                setup_preview_emails_with_titles(finalCache); // call back function\n                            }\n\n                        } else { // for other alert types\n                            // built templates with template keys sent to setup previews\n                            setup_preview_buttons(finalCache);\n                        }\n                    })\n                    .catch(function (error) {\n                        console.error('Failed to render template:', error);\n                    });\n            });\n    }\n}\n\n"],"names":["setup_custom_message_listener","textarea","document","getElementById","preview","querySelector","console","log","new_textarea","cloneNode","parentNode","replaceChild","addEventListener","message","value","trim","window","currentTemplateCache","set","templateCache","template_cache_input_el","course_name","JSON","parse","textarea_el","custom_message","final_cache","Map","current_cache","forEach","key","build_template_cache","alert_type_el","at","assignmentTitle","setup_preview_emails_with_titles","setup_preview_buttons","filter_students_by_grade_select","grade_select","course_id","alert_type","teacher_user_id","e","grade_letter_id","target","setup_filter_students_by_grade","filter_students_by_assignment","assignment_input","title","assignmentPreview","textContent","substring","length","validateAssignmentTitle","evt","assignment_title","selected_students","parseInt","render","then","html","js","innerHTML","runTemplateJS","catch","error","finalCache","get_grades_and_templates","ajax","call","methodname","args","Promise","all","_ref","grades_response","templates_response","num_students","num_rows","Math","min","ceil","num_cols","display_data","student_rows","templates","r","students","row","col","result","includes","lang","idnumber","course_lang","push","campus","campus_lang","faculty","campus_fac_lang","major","campus_fac_maj_lang","courseid","stringify","grade","assign","exam","fullname","focusOnCheckall","setup_custom_message_toggles","check_allnone_listener","cachedArrayElement","cachedArray","templateKey","finalMessage","subject","templateid","revision_id","instructor_id","triggered_from_user_id","has","event","classList","contains","getAttribute","get_users"],"mappings":"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"}